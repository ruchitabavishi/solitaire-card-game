{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst cardRanking = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\nconst cardSuits = ['spade', 'heart', 'diamond', 'club'];\n\n// 24 cards in deck\n// 28 card distributed\nexport default {\n  data() {\n    return {\n      currentOpenCardInDec: null,\n      remaininDecNextIndex: 0,\n      totalRow: [0, 1, 2, 3, 4, 5, 6],\n      globalDeck: [],\n      shuffledDeck: [],\n      pileCards: [{\n        suitSymbol: '‚ô†',\n        suit: 'spade',\n        cardColor: 'black',\n        rank: null,\n        higher: 'A'\n      }, {\n        suitSymbol: '‚ô•',\n        suit: 'heart',\n        cardColor: 'red',\n        rank: null,\n        higher: 'A'\n      }, {\n        suitSymbol: '‚ô¶',\n        suit: 'diamond',\n        cardColor: 'red',\n        rank: null,\n        higher: 'A'\n      }, {\n        suitSymbol: '‚ô£',\n        suit: 'club',\n        cardColor: 'black',\n        rank: null,\n        higher: 'A'\n      }],\n      remainingDeck: [],\n      pileDeck: {},\n      draggindCard: null,\n      draggingRow: null\n    };\n  },\n  methods: {\n    handleDropForRow(event, target) {\n      console.log();\n    },\n    handleDragCurrentOpenDeckCard() {\n      this.draggindCard = this.currentOpenCardInDec;\n      this.draggingRow = null;\n    },\n    handleDragStart(card, row) {\n      this.draggindCard = card;\n      this.draggingRow = row;\n      console.log(card, \"this is dragging card\");\n    },\n    handleDropForPile(e, target) {\n      console.log(target);\n      this.checkCardCanBeDropedOnPile(e.target.id);\n      console.log(\"this is drop\", e.target.id);\n    },\n    checkCardCanBeDropedOnPile(id) {\n      const droppedCard = this.pileCards.find(card => card.suit == id);\n      const index = this.pileCards.findIndex(card => card.suit == id);\n      if (!droppedCard) {\n        console.warn(\"no card found to drop\");\n        return;\n      }\n      const higherOfSelectedPile = droppedCard.higher;\n      if (higherOfSelectedPile == this.draggindCard.rank) {\n        // card can be dropped there\n        console.log(this.pileCards[index], \"this.pileCards[index]\");\n        this.pileCards[index].rank = this.draggindCard.rank;\n        this.pileCards[index].higher = this.draggindCard.higher;\n        this.updateDraggedRow();\n        this.updateRemainingDeck();\n      }\n    },\n    updateRemainingDeck() {\n      if (!this.currentOpenCardInDec) {\n        return;\n      }\n      if (this.draggindCard.rank != this.currentOpenCardInDec.rank && this.draggindCard.suit != this.currentOpenCardInDec.suit) {\n        console.warn(\"draggind card is not from deck so not updating anything\");\n        return;\n      }\n      const draggedCardIndex = this.remainingDeck.findIndex(e => e.rank == this.draggindCard.rank && e.suit == this.draggindCard.suit);\n      console.log(this.remainingDeck[draggedCardIndex]);\n      this.remainingDeck.splice(draggedCardIndex, 1);\n      this.onDeckClick();\n    },\n    updateDraggedRow() {\n      if (this.draggingRow == null) {\n        console.warn(\"no row index found to update\");\n        return;\n      }\n      this.pileDeck[`row-${this.draggingRow}`].pop();\n      const index = this.pileDeck[`row-${this.draggingRow}`].length;\n      if (index == 0) {\n        return;\n      }\n      this.pileDeck[`row-${this.draggingRow}`][index - 1].isOpen = true;\n    },\n    onDeckClick() {\n      this.currentOpenCardInDec = this.remainingDeck[this.remaininDecNextIndex];\n      this.remaininDecNextIndex++;\n      if (this.remaininDecNextIndex == this.remainingDeck.length) {\n        this.showDeckResetIcon = true;\n        this.remaininDecNextIndex = 0;\n        return;\n      }\n    },\n    getPileDec(index) {\n      return this.pileDeck[`row-${index}`] || [];\n    },\n    createCard(rank, suit, higher) {\n      let suitSymbol, cardColor;\n      switch (suit) {\n        case 'spade':\n          suitSymbol = '‚ô†';\n          cardColor = 'black';\n          break;\n        case 'heart':\n          suitSymbol = '‚ô•';\n          cardColor = 'red';\n          break;\n        case 'diamond':\n          suitSymbol = '‚ô¶';\n          cardColor = 'red';\n          break;\n        case 'club':\n          suitSymbol = '‚ô£';\n          cardColor = 'black';\n          break;\n        default:\n          suitSymbol = 'üÉè';\n          cardColor = 'black';\n          break;\n      }\n      return {\n        suitSymbol: suitSymbol,\n        rank,\n        higher,\n        suit,\n        color: cardColor,\n        below: null\n      };\n    },\n    createDeck() {\n      const deck = [];\n      for (let i = 0; i < cardSuits.length; i++) {\n        for (let j = 0; j < cardRanking.length; j++) {\n          const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n          const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n          deck.push(newCard);\n        }\n      }\n      return deck;\n    },\n    handleDropEvent(element) {\n      console.log(element, \"this is drop element taget\");\n    },\n    distributeCards() {\n      const totalRow = 7;\n      this.remainingDeck = this.globalDeck;\n\n      // each row will have index+1 card \n      // eg: 0th index  -  1 card and index(0th) card will be opne \n      // eg: 7th row: index - 6 and 7th (index actually) card will be open \n\n      for (let i = 0; i < totalRow; i++) {\n        this.pileDeck[`row-${i}`] = [];\n        for (let j = 0; j <= i; j++) {\n          const card = this.remainingDeck[this.remainingDeck.length - 1];\n          card.isOpen = false;\n          if (j == i) {\n            card.isOpen = true;\n          }\n          this.pileDeck[`row-${i}`].push(card);\n          // remove card from remaining card deck \n          this.remainingDeck.pop();\n        }\n      }\n      console.log(this.pileDeck, \"this is pile deck\");\n    },\n    shuffleCards(deck) {\n      return deck.sort(() => Math.random() - 0.5);\n    }\n  },\n  checkCardCanBeDropeed() {},\n  mounted() {\n    this.globalDeck = this.createDeck();\n    this.shuffledDeck = this.shuffleCards(this.globalDeck);\n    this.distributeCards();\n  },\n  created() {}\n};","map":{"version":3,"names":["cardRanking","cardSuits","data","currentOpenCardInDec","remaininDecNextIndex","totalRow","globalDeck","shuffledDeck","pileCards","suitSymbol","suit","cardColor","rank","higher","remainingDeck","pileDeck","draggindCard","draggingRow","methods","handleDropForRow","event","target","console","log","handleDragCurrentOpenDeckCard","handleDragStart","card","row","handleDropForPile","e","checkCardCanBeDropedOnPile","id","droppedCard","find","index","findIndex","warn","higherOfSelectedPile","updateDraggedRow","updateRemainingDeck","draggedCardIndex","splice","onDeckClick","pop","length","isOpen","showDeckResetIcon","getPileDec","createCard","color","below","createDeck","deck","i","j","higherRank","newCard","push","handleDropEvent","element","distributeCards","shuffleCards","sort","Math","random","checkCardCanBeDropeed","mounted","created"],"sources":["/Users/ruchita/ruchita-projects/simple-card-game/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"root\">\n    <div class=\"top-area\">\n        <div class=\"left-area\">\n          <div class=\"deck-container\">\n            <div class=\"card closed-card\" @click=\"onDeckClick\"></div>\n            <div v-if=\"currentOpenCardInDec\" class=\"card bg-white\" draggable=\"true\" @dragstart=\"handleDragCurrentOpenDeckCard()\">\n              <div class=\" card-details\" :class=\"`${currentOpenCardInDec.color}`\">\n                <div> {{ currentOpenCardInDec.suitSymbol}}</div>\n                <div> {{currentOpenCardInDec.rank}} </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"right-area\">\n          <div v-for=\"card in pileCards\" :key=card.suitSymbol class=\"card bg-white\" @dragover.prevent :id=\"`${card.suit}`\"\n           @drop=\"handleDropForPile($event, target)\">\n           {{card.cardColor}}\n              <div v-if=\"card.rank\" class=\"card-details\" :class=\"`${card.cardColor}`\">\n                <div> {{ card.suitSymbol}}</div>\n                <div> {{card.rank}} </div>\n              </div>\n              <div v-else class=\"card-details\" >{{card.suitSymbol}}</div>\n          </div>\n        </div>\n\n    </div>\n\n    <div class=\"bottom-container\">\n      <div v-for=\"row in totalRow\" :key='row' class=\"pile-row\">\n        <div v-if=\"getPileDec(row).length == 0\" class=\"card\">\n\n        </div>\n            <div v-for=\"(card,i) in getPileDec(row)\" :key='i' class=\"card \"\n             :class=\"card.isOpen ? 'bg-white non-show-card': 'closed-card non-show-card'\" \n             @drop=\"handleDropForRow($event, target)\"\n             @dragstart=\"handleDragStart(card, row)\" draggable=\"true\">\n             <div v-if=\"card.isOpen\" class=\"card-details\" :class=\"`${card.color}`\">\n                <div> {{ card.suitSymbol}}</div>\n                <div> {{card.rank}} </div>\n              </div>\n          </div>\n      </div>\n    </div>\n\n  </div>  \n</template>\n\n<script>\n  const cardRanking = ['A', '2', '3', '4', '5',\n              '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  const cardSuits = ['spade', 'heart', 'diamond', 'club'];\n\n\n\n  // 24 cards in deck\n  // 28 card distributed\n  export default {\n      data() {\n        return {\n          currentOpenCardInDec: null,\n          remaininDecNextIndex: 0,\n          totalRow: [0,1,2,3,4,5,6],\n          globalDeck: [],\n          shuffledDeck: [],\n          pileCards: [\n            {\n              suitSymbol:'‚ô†',\n              suit: 'spade',\n              cardColor :'black',\n              rank: null,\n              higher: 'A'\n            },\n            {\n              suitSymbol:'‚ô•',\n              suit: 'heart',\n              cardColor :'red',\n              rank: null,\n              higher: 'A'\n            },\n            {\n              suitSymbol:'‚ô¶',\n              suit: 'diamond',\n              cardColor :'red',\n              rank: null,\n              higher: 'A'\n            },\n            {\n              suitSymbol:'‚ô£',\n              suit: 'club',\n              cardColor :'black',\n              rank: null,\n              higher: 'A'\n            },\n          ],\n          remainingDeck: [],\n          pileDeck: {},\n          draggindCard: null,\n          draggingRow: null\n        }\n      },\n      methods: {\n        handleDropForRow(event, target) {\n          console.log()\n        },\n        handleDragCurrentOpenDeckCard() {\n          this.draggindCard = this.currentOpenCardInDec\n          this.draggingRow = null\n        },\n        handleDragStart(card, row) {\n          this.draggindCard = card\n          this.draggingRow = row\n          console.log(card,\"this is dragging card\")\n        },\n        handleDropForPile(e, target) {\n          console.log(target)\n          this.checkCardCanBeDropedOnPile(e.target.id)\n          console.log(\"this is drop\", e.target.id)\n        },\n        checkCardCanBeDropedOnPile(id) {\n          const droppedCard = this.pileCards.find(card => card.suit == id)\n          const index = this.pileCards.findIndex(card => card.suit == id)\n          if(!droppedCard) {\n            console.warn(\"no card found to drop\")\n            return\n          }\n          const higherOfSelectedPile = droppedCard.higher\n          if(higherOfSelectedPile == this.draggindCard.rank) {\n            // card can be dropped there\n            console.log(this.pileCards[index],\"this.pileCards[index]\")\n            this.pileCards[index].rank =  this.draggindCard.rank\n            this.pileCards[index].higher = this.draggindCard.higher\n            this.updateDraggedRow()\n            this.updateRemainingDeck();\n          }\n        },\n        updateRemainingDeck() {\n          if(!this.currentOpenCardInDec) {\n            return;\n          }\n          if(this.draggindCard.rank != this.currentOpenCardInDec.rank && this.draggindCard.suit != this.currentOpenCardInDec.suit) {\n            console.warn(\"draggind card is not from deck so not updating anything\")\n            return\n          }\n          const draggedCardIndex = this.remainingDeck.findIndex(e => e.rank == this.draggindCard.rank && e.suit == this.draggindCard.suit)\n          console.log(this.remainingDeck[draggedCardIndex])\n          this.remainingDeck.splice(draggedCardIndex, 1)\n\n          this.onDeckClick()\n        },  \n        updateDraggedRow() {\n          if(this.draggingRow == null) {\n            console.warn(\"no row index found to update\")\n            return;\n          }\n          this.pileDeck[`row-${this.draggingRow}`].pop()\n          const index = this.pileDeck[`row-${this.draggingRow}`].length\n          if(index == 0) {\n            return;\n          }\n          this.pileDeck[`row-${this.draggingRow}`][index - 1].isOpen = true\n        },\n        onDeckClick() {\n          this.currentOpenCardInDec = this.remainingDeck[this.remaininDecNextIndex]\n          this.remaininDecNextIndex++;\n\n          if(this.remaininDecNextIndex == (this.remainingDeck.length) ) {\n            this.showDeckResetIcon = true;\n            this.remaininDecNextIndex = 0\n            return\n          }\n\n        },\n        getPileDec(index) {\n          return this.pileDeck[`row-${index}`] || []\n        },\n        createCard(rank, suit, higher) {\n          \n          let suitSymbol, cardColor;\n          switch (suit) {\n              case 'spade':\n                  suitSymbol = '‚ô†';\n                  cardColor = 'black';\n                  break;\n              case 'heart':\n                  suitSymbol = '‚ô•';\n                  cardColor = 'red';\n                  break;\n              case 'diamond':\n                  suitSymbol = '‚ô¶';\n                  cardColor = 'red';\n                  break;\n              case 'club':\n                  suitSymbol = '‚ô£';\n                  cardColor = 'black';\n                  break;\n              default:\n                  suitSymbol = 'üÉè';\n                  cardColor = 'black';\n                  break;\n          }\n\n          return {\n            suitSymbol: suitSymbol,\n              rank,\n              higher,\n              suit,\n              color: cardColor,\n              below: null\n          }\n        },\n        createDeck() {\n          const deck = [];\n          for (let i = 0; i < cardSuits.length; i++) {\n            for (let j = 0; j < cardRanking.length; j++) {  \n              const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n              const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n              deck.push(newCard);\n            }\n          }\n          return deck;\n        },\n        handleDropEvent(element) {\n          console.log(element,\"this is drop element taget\")\n        },\n\n        distributeCards() {\n          const totalRow = 7; \n          this.remainingDeck = this.globalDeck;\n         \n          // each row will have index+1 card \n          // eg: 0th index  -  1 card and index(0th) card will be opne \n          // eg: 7th row: index - 6 and 7th (index actually) card will be open \n\n          for(let i=0; i< totalRow; i++) {\n            this.pileDeck[`row-${i}`] = []\n              for(let j=0; j<= i; j++) {\n                const card = this.remainingDeck[this.remainingDeck.length - 1]\n                card.isOpen = false\n                \n                if(j == i) {  \n                  card.isOpen = true\n                   \n                }\n                this.pileDeck[`row-${i}`].push(card)\n                // remove card from remaining card deck \n                this.remainingDeck.pop()\n              }\n          }\n          console.log(this.pileDeck,\"this is pile deck\")\n        },\n        shuffleCards(deck) {\n         return deck.sort(() => Math.random() - 0.5);\n       },\n      },\n      checkCardCanBeDropeed() {\n\n      },\n      mounted() {\n        this.globalDeck = this.createDeck();\n        this.shuffledDeck = this.shuffleCards(this.globalDeck)\n        this.distributeCards()\n      },\n      created() {\n      }\n  }\n\n</script>\n\n<style scoped>\n.root {\n  position: relative;\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.top-area {\n  justify-content: space-around;\n  align-items: center;\n  min-height: 30%;\n  background: darkgreen;\n  display: flex;\n}\n\n.right-area {\n  width: 45%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.closed-card {\n  background: skyblue;\n}\n\n.bg-white {\n  background: white;\n}\n\n\n.card {\n  display: flex;\n  border-radius: 8px;\n  width: 100px;\n  height: 150px;\n  border: black solid 1px;\n  box-shadow: 0cm;\n}\n.red {\n  color: red\n}\n\n.black {\n  color: black\n}\n\n.card-details {\n  margin:auto;\n  align-content: center;\n  font-size: 60px;\n}\n.bottom-container {\n  padding-top: 60px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  justify-content: space-around;\n  background: lightgreen;\n}\n.pile-row {\n  display: flex;\n  flex-direction: column;\n}\n.pile-row .card:not(:first-child) {\n  margin-top: -100px;\n}\n.deck-container {\n  display: flex;\n}\n.pile-column {\n  display: flex;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}