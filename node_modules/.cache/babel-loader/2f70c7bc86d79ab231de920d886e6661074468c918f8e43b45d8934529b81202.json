{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'HelloWorld',\n  methods: {\n    createCard(rank, suit, higher) {\n      let suitSymbol, cardColor;\n      switch (suit) {\n        case 'spade':\n          suitSymbol = '‚ô†';\n          cardColor = 'black';\n          break;\n        case 'heart':\n          suitSymbol = '‚ô•';\n          cardColor = 'red';\n          break;\n        case 'diamond':\n          suitSymbol = '‚ô¶';\n          cardColor = 'red';\n          break;\n        case 'club':\n          suitSymbol = '‚ô£';\n          cardColor = 'black';\n          break;\n        default:\n          suitSymbol = 'üÉè';\n          cardColor = 'black';\n          break;\n      }\n      let frontInnerHTML = `<div class=\"inner-info card-rank\">${rank}</div>`;\n      frontInnerHTML += `<div class=\"inner-info card-suit-small\">${suitSymbol}</div>`;\n      frontInnerHTML += `<div class=\"inner-info card-suit-big\">${suitSymbol}</div>`;\n      return {\n        rank,\n        higher,\n        inner: frontInnerHTML,\n        suit,\n        color: cardColor,\n        below: null\n      };\n    },\n    createDeck() {\n      const cardRanking = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n      const cardSuits = ['spade', 'heart', 'diamond', 'club'];\n      const deck = [];\n      for (let i = 0; i < cardSuits.length; i++) {\n        for (let j = 0; j < cardRanking.length; j++) {\n          const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n          const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n          deck.push(newCard);\n        }\n      }\n      console.log(deck, \"this is complete deck\");\n      return deck;\n    },\n    shuffleCards(deck) {\n      return deck.sort(() => Math.random() - 0.5);\n    },\n    putCardsInDeck(cards) {\n      const deck = document.getElementById('deck');\n      cards.forEach(() => {\n        deck.innerHTML += `<div class=\"card back\"></div>`;\n      });\n      const cardsInDeck = deck.querySelectorAll('.card');\n      cards.forEach((card, index) => {\n        cardsInDeck[index].cardInfo = card;\n      });\n    },\n    turnCard() {\n      const isLastCard = this === this.parentNode.lastElementChild;\n      const isCardVisible = this.style.visibility !== 'hidden';\n      const isCardFacingDown = this.classList.contains('back');\n      if (isLastCard && isCardVisible) {\n        if (isCardFacingDown) {\n          this.classList.remove('back');\n          this.classList.add(`${this.cardInfo.suit}`);\n          this.innerHTML = this.cardInfo.inner;\n        }\n        this.setAttribute('draggable', true);\n      }\n    },\n    turnCardBack(card) {\n      card.classList.remove(`${card.cardInfo.suit}`);\n      card.classList.add('back');\n      card.innerHTML = '';\n      card.setAttribute('draggable', false);\n    },\n    distributeCards() {\n      const piles = document.querySelectorAll('.row');\n      piles.forEach((pile, index) => {\n        for (let i = 0; i < index + 1; i++) {\n          const deck = document.getElementById('deck');\n          const topCard = deck.lastElementChild;\n          if (i === index) {\n            this.turnCard.apply(topCard);\n          }\n          deck.removeChild(topCard);\n          pile.append(topCard);\n        }\n      });\n    },\n    showTopCard(topCards, deck, deckTopCard) {\n      if (deckTopCard.cardInfo) {\n        deck.removeChild(deckTopCard);\n        topCards.append(deckTopCard);\n        if (topCards.childElementCount > 1) {\n          topCards.childNodes[0].setAttribute('draggable', false);\n        }\n        if (topCards.childElementCount > 2) {\n          topCards.childNodes[1].setAttribute('draggable', false);\n        }\n        if (topCards.childElementCount > 3) {\n          topCards.childNodes[2].setAttribute('draggable', false);\n          const firstCard = topCards.firstElementChild;\n          this.turnCardBack(firstCard);\n          firstCard.style.visibility = 'hidden';\n          topCards.removeChild(firstCard);\n          deck.prepend(firstCard);\n        }\n      }\n    },\n    returnCardsToDeck(topCards, deck) {\n      const cardsToDeck = [];\n      topCards.childNodes.forEach(card => {\n        this.turnCardBack(card);\n        card.style.visibility = 'hidden';\n        cardsToDeck.push(card);\n      });\n      cardsToDeck.forEach(card => {\n        deck.prepend(card);\n      });\n      topCards.innerHTML = '';\n      const cardsInDeck = deck.querySelectorAll('.card');\n      cardsInDeck.forEach(card => {\n        card.style.visibility = 'visible';\n      });\n    },\n    checkDeckCards() {\n      const topCards = document.getElementById('top-cards');\n      const deck = document.getElementById('deck');\n      const deckTopCard = deck.lastElementChild;\n      if (!deckTopCard) {\n        this.returnCardsToDeck(topCards, deck);\n      } else if (deckTopCard.style.visibility === 'hidden') {\n        this.returnCardsToDeck(topCards, deck);\n      } else {\n        this.showTopCard(topCards, deck, deckTopCard);\n      }\n    },\n    changeCardPosition(cardToDrop, dropSpot, checkCondition) {\n      if (checkCondition) {\n        const cardAbove = cardToDrop.previousSibling;\n        cardToDrop.parentNode.removeChild(cardToDrop);\n        dropSpot.append(cardToDrop);\n        if (cardToDrop.cardInfo.below) {\n          cardToDrop.cardInfo.below.forEach(card => dropSpot.append(card));\n        }\n        return cardAbove;\n      }\n    },\n    dropInRow(cardToDrop, dropSpot) {\n      const cardToDropInfo = cardToDrop.cardInfo;\n      const lastCardInRow = dropSpot.lastElementChild;\n      if (lastCardInRow) {\n        const lastCardInfo = lastCardInRow.cardInfo;\n        if (lastCardInfo && lastCardInRow.draggable) {\n          const checkRank = lastCardInfo.rank === cardToDropInfo.higher;\n          const checkColor = lastCardInfo.color !== cardToDropInfo.color;\n          return this.changeCardPosition(cardToDrop, dropSpot, checkRank && checkColor);\n        }\n      } else {\n        const checkRank = cardToDrop.cardInfo.rank === 'K';\n        return this.changeCardPosition(cardToDrop, dropSpot, checkRank);\n      }\n    },\n    dropInPile(cardToDrop, dropSpot) {\n      const cardToDropInfo = cardToDrop.cardInfo;\n      const lastCardInPile = dropSpot.lastElementChild;\n      if (!cardToDropInfo.below) {\n        if (lastCardInPile) {\n          const lastCardInfo = lastCardInPile.cardInfo;\n          if (lastCardInfo) {\n            const checkRank = lastCardInfo.higher === cardToDropInfo.rank;\n            const checkSuit = lastCardInfo.suit === cardToDropInfo.suit;\n            if (checkRank && checkSuit) {\n              lastCardInPile.setAttribute('draggable', false);\n            }\n            return this.changeCardPosition(cardToDrop, dropSpot, checkRank && checkSuit);\n          } else {\n            const checkRank = cardToDropInfo.rank === 'A';\n            const checkSuit = lastCardInPile.id.split('-')[0] === cardToDropInfo.suit;\n            return this.changeCardPosition(cardToDrop, dropSpot, checkRank && checkSuit);\n          }\n        }\n      }\n    },\n    dropCard(event, cardToDrop) {\n      const tgt = event.target;\n      const findSpot = function (element, htmlClass) {\n        const classList = element.classList;\n        if (classList) {\n          if (classList.contains(htmlClass)) {\n            return element;\n          } else {\n            return findSpot(element.parentNode, htmlClass);\n          }\n        }\n        return;\n      };\n      const dropSpot = findSpot(tgt, 'row') || findSpot(tgt, 'pile');\n      let cardAbove;\n      if (dropSpot) {\n        if (dropSpot.classList.contains('row')) {\n          cardAbove = this.dropInRow(cardToDrop, dropSpot);\n        } else if (dropSpot.classList.contains('pile')) {\n          cardAbove = this.dropInPile(cardToDrop, dropSpot);\n        }\n      }\n      if (cardAbove) {\n        this.turnCard.apply(cardAbove);\n      }\n    },\n    checkGameOver() {\n      const piles = document.querySelectorAll('.pile');\n      let allPilesComplete = true;\n      piles.forEach(pile => {\n        allPilesComplete = allPilesComplete && pile.childElementCount - 1 === 13;\n      });\n      if (allPilesComplete) {\n        alert('YOU WIN!');\n      }\n    },\n    resetSelections(card) {\n      card.cardInfo.below = null;\n      card = null;\n      return card;\n    },\n    dragRowCards(card) {\n      const cardParent = card.parentNode;\n      const isLastCard = card === cardParent.lastElementChild;\n      if (!isLastCard) {\n        card.cardInfo.below = [];\n        for (let i = cardParent.childElementCount - 1; i >= 0; i--) {\n          if (cardParent.childNodes[i] === card) {\n            return;\n          }\n          card.cardInfo.below.unshift(cardParent.childNodes[i]);\n        }\n      }\n    }\n  },\n  data() {\n    return {\n      globalDeck: [],\n      shuffledDeck: []\n    };\n  },\n  mounted() {\n    this.globalDeck = this.createDeck();\n    this.shuffledDeck = this.shuffleCards(this.globalDeck);\n    this.putCardsInDeck(this.shuffledDeck);\n    this.distributeCards();\n  }\n\n  // const deck = document.getElementById('deck');\n  // deck.addEventListener('click', checkDeckCards);\n\n  // const cards = document.getElementsByClassName('card');\n  // for (let i = 0; i < cards.length; i++) {\n  // cards[i].addEventListener('click', turnCard);\n  // }\n\n  // let selectedCard = null;\n\n  // document.addEventListener(\"dragstart\", event => {\n  // if (event.target.draggable) {\n  //     selectedCard = event.target;\n  //     dragRowCards(selectedCard);\n  // }\n  // });\n\n  // document.addEventListener(\"dragover\", event => {\n  // event.preventDefault();\n  // }, false);\n\n  // document.addEventListener(\"drop\", event => {\n  // event.preventDefault();\n  // dropCard(event, selectedCard);\n  // selectedCard = resetSelections(selectedCard);\n  // checkGameOver();\n  // });\n};","map":{"version":3,"names":["name","methods","createCard","rank","suit","higher","suitSymbol","cardColor","frontInnerHTML","inner","color","below","createDeck","cardRanking","cardSuits","deck","i","length","j","higherRank","newCard","push","console","log","shuffleCards","sort","Math","random","putCardsInDeck","cards","document","getElementById","forEach","innerHTML","cardsInDeck","querySelectorAll","card","index","cardInfo","turnCard","isLastCard","parentNode","lastElementChild","isCardVisible","style","visibility","isCardFacingDown","classList","contains","remove","add","setAttribute","turnCardBack","distributeCards","piles","pile","topCard","apply","removeChild","append","showTopCard","topCards","deckTopCard","childElementCount","childNodes","firstCard","firstElementChild","prepend","returnCardsToDeck","cardsToDeck","checkDeckCards","changeCardPosition","cardToDrop","dropSpot","checkCondition","cardAbove","previousSibling","dropInRow","cardToDropInfo","lastCardInRow","lastCardInfo","draggable","checkRank","checkColor","dropInPile","lastCardInPile","checkSuit","id","split","dropCard","event","tgt","target","findSpot","element","htmlClass","checkGameOver","allPilesComplete","alert","resetSelections","dragRowCards","cardParent","unshift","data","globalDeck","shuffledDeck","mounted"],"sources":["/Users/ruchita/ruchita-projects/simple-card-game/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n <div>\n  <div class=\"top-area\">\n  <div class=\"container\">\n    <div class=\"left-area\">\n      <div id=\"deck\" class=\"deck\"></div>\n      <div id=\"top-cards\" class=\"top-cards\"></div>\n    </div>\n    <div class=\"right-area\">\n      <div class=\"pile\"><span id=\"spade-cards\">‚ô†</span></div>\n      <div class=\"pile\"><span id=\"heart-cards\">‚ô•</span></div>\n      <div class=\"pile\"><span id=\"diamond-cards\">‚ô¶</span></div>\n      <div class=\"pile\"><span id=\"club-cards\">‚ô£</span></div>\n    </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"bottom-area\">\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n  </div>\n</div>\n\n\n </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  methods:{\n    createCard(rank, suit, higher) {\n\n      let suitSymbol, cardColor;\n      switch (suit) {\n          case 'spade':\n              suitSymbol = '‚ô†';\n              cardColor = 'black';\n              break;\n          case 'heart':\n              suitSymbol = '‚ô•';\n              cardColor = 'red';\n              break;\n          case 'diamond':\n              suitSymbol = '‚ô¶';\n              cardColor = 'red';\n              break;\n          case 'club':\n              suitSymbol = '‚ô£';\n              cardColor = 'black';\n              break;\n          default:\n              suitSymbol = 'üÉè';\n              cardColor = 'black';\n              break;\n      }\n\n      let frontInnerHTML = `<div class=\"inner-info card-rank\">${rank}</div>`;\n      frontInnerHTML += `<div class=\"inner-info card-suit-small\">${suitSymbol}</div>`;\n      frontInnerHTML += `<div class=\"inner-info card-suit-big\">${suitSymbol}</div>`;\n\n      return {\n          rank,\n          higher,\n          inner: frontInnerHTML,\n          suit,\n          color: cardColor,\n          below: null\n      }\n    },\n\n    createDeck() {\n\n      const cardRanking = ['A', '2', '3', '4', '5',\n          '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n\n      const cardSuits = ['spade', 'heart', 'diamond', 'club'];\n\n      const deck = [];\n\n      for (let i = 0; i < cardSuits.length; i++) {\n          for (let j = 0; j < cardRanking.length; j++) {\n\n              const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n              const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n              deck.push(newCard);\n\n          }\n\n      }\n      console.log(deck,\"this is complete deck\")\n      return deck;\n\n    },\n    shuffleCards(deck) {\n      return deck.sort(() => Math.random() - 0.5);\n    },\n\n    putCardsInDeck(cards) {\n\n      const deck = document.getElementById('deck');\n\n      cards.forEach(() => {\n          deck.innerHTML += `<div class=\"card back\"></div>`;\n      });\n\n      const cardsInDeck = deck.querySelectorAll('.card');\n\n      cards.forEach((card, index) => {\n          cardsInDeck[index].cardInfo = card;\n      });\n\n    },\n\n    turnCard() {\n\n      const isLastCard = this === this.parentNode.lastElementChild;\n      const isCardVisible = this.style.visibility !== 'hidden';\n      const isCardFacingDown = this.classList.contains('back');\n\n      if (isLastCard && isCardVisible) {\n\n          if (isCardFacingDown) {\n          \n              this.classList.remove('back');\n              this.classList.add(`${this.cardInfo.suit}`);\n              this.innerHTML = this.cardInfo.inner;\n          }\n\n          this.setAttribute('draggable', true);\n      }\n\n    },\n\nturnCardBack(card) {\n\ncard.classList.remove(`${card.cardInfo.suit}`);\ncard.classList.add('back');\ncard.innerHTML = '';\ncard.setAttribute('draggable', false);\n\n},\n\ndistributeCards() {\n\nconst piles = document.querySelectorAll('.row');\n\npiles.forEach((pile, index) => {\n    \n    for (let i = 0; i < index + 1; i++) {\n\n        const deck = document.getElementById('deck');\n        const topCard = deck.lastElementChild;\n\n        if (i === index) {\n            this.turnCard.apply(topCard);\n        }\n\n        deck.removeChild(topCard);\n        pile.append(topCard);\n    }\n\n});\n\n},\n\n\nshowTopCard(topCards, deck, deckTopCard) {\n\nif (deckTopCard.cardInfo) {\n\n    deck.removeChild(deckTopCard);\n    topCards.append(deckTopCard);\n    \n    if (topCards.childElementCount > 1) {\n        topCards.childNodes[0].setAttribute('draggable', false);\n    }\n\n    if (topCards.childElementCount > 2) {\n        topCards.childNodes[1].setAttribute('draggable', false);\n    }\n\n    if (topCards.childElementCount > 3) {\n\n        topCards.childNodes[2].setAttribute('draggable', false);\n\n        const firstCard = topCards.firstElementChild;\n\n        this.turnCardBack(firstCard);\n        firstCard.style.visibility = 'hidden';\n\n        topCards.removeChild(firstCard);\n        deck.prepend(firstCard);\n    }\n\n}\n\n},\n\nreturnCardsToDeck(topCards, deck) {\n\nconst cardsToDeck = [];\n\ntopCards.childNodes.forEach(card => {\n    this.turnCardBack(card);\n    card.style.visibility = 'hidden';\n    cardsToDeck.push(card);\n});\n\ncardsToDeck.forEach(card => {\n    deck.prepend(card);\n});\n\ntopCards.innerHTML = '';\n\nconst cardsInDeck = deck.querySelectorAll('.card');\n\ncardsInDeck.forEach(card => {\n    card.style.visibility = 'visible';\n});\n\n\n},\n\ncheckDeckCards() {\n\nconst topCards = document.getElementById('top-cards');\nconst deck = document.getElementById('deck');\nconst deckTopCard = deck.lastElementChild;\n\nif (!deckTopCard) {\n    this.returnCardsToDeck(topCards, deck);\n} else if (deckTopCard.style.visibility === 'hidden') {\n    this.returnCardsToDeck(topCards, deck);\n} else {\n    this.showTopCard(topCards, deck, deckTopCard);\n}\n\n},\n\n\nchangeCardPosition(cardToDrop, dropSpot, checkCondition) {\n\nif (checkCondition) {\n\n    const cardAbove = cardToDrop.previousSibling;\n\n    cardToDrop.parentNode.removeChild(cardToDrop);\n    dropSpot.append(cardToDrop);\n\n    if (cardToDrop.cardInfo.below) {\n        cardToDrop.cardInfo.below.forEach(card => dropSpot.append(card));\n    }\n\n    return cardAbove;\n}\n\n},\n\ndropInRow(cardToDrop, dropSpot) {\n\nconst cardToDropInfo = cardToDrop.cardInfo;\nconst lastCardInRow = dropSpot.lastElementChild;\n\nif (lastCardInRow) {\n\n    const lastCardInfo = lastCardInRow.cardInfo;\n\n    if (lastCardInfo && lastCardInRow.draggable) {\n\n        const checkRank = lastCardInfo.rank === cardToDropInfo.higher;\n        const checkColor = lastCardInfo.color !== cardToDropInfo.color;\n\n        return this.changeCardPosition(cardToDrop, dropSpot, (checkRank && checkColor));\n    }\n\n} else {\n\n    const checkRank = cardToDrop.cardInfo.rank === 'K';\n\n    return this.changeCardPosition(cardToDrop, dropSpot, checkRank);\n\n}\n},\n\ndropInPile(cardToDrop, dropSpot) {\n\nconst cardToDropInfo = cardToDrop.cardInfo;\nconst lastCardInPile = dropSpot.lastElementChild;\n\nif (!cardToDropInfo.below) {\n\n    if (lastCardInPile) {\n\n        const lastCardInfo = lastCardInPile.cardInfo;\n\n        if (lastCardInfo) {\n\n            const checkRank = lastCardInfo.higher === cardToDropInfo.rank;\n            const checkSuit = lastCardInfo.suit === cardToDropInfo.suit;\n\n            if (checkRank && checkSuit) {\n                lastCardInPile.setAttribute('draggable', false);\n            }\n\n            return this.changeCardPosition(cardToDrop, dropSpot, (checkRank && checkSuit));\n\n        } else {\n\n            const checkRank = cardToDropInfo.rank === 'A';\n            const checkSuit = lastCardInPile.id.split('-')[0] === cardToDropInfo.suit;\n\n            return this.changeCardPosition(cardToDrop, dropSpot, (checkRank && checkSuit));\n        }\n\n    }\n}\n},\n\ndropCard(event, cardToDrop) {\n\nconst tgt = event.target;\n\nconst findSpot = function (element, htmlClass) {\n\n    const classList = element.classList;\n\n    if (classList) {\n\n        if (classList.contains(htmlClass)) {\n            return element;\n\n        } else {\n            return findSpot(element.parentNode, htmlClass);\n\n        } \n\n    }\n\n    return;\n\n}\n\nconst dropSpot = findSpot(tgt, 'row') || findSpot(tgt, 'pile');\n\nlet cardAbove;\n\nif (dropSpot) {\n\n    if (dropSpot.classList.contains('row')) {\n\n        cardAbove = this.dropInRow(cardToDrop, dropSpot);\n\n    } else if (dropSpot.classList.contains('pile')) {\n\n        cardAbove = this.dropInPile(cardToDrop, dropSpot);\n\n    }\n\n}\n\nif (cardAbove) {\n    this.turnCard.apply(cardAbove);\n}\n\n},\n\ncheckGameOver() {\n\nconst piles = document.querySelectorAll('.pile');\n\nlet allPilesComplete =  true;\n\npiles.forEach(pile => {\n    allPilesComplete = allPilesComplete && (pile.childElementCount - 1) === 13;\n});\n\nif (allPilesComplete) {\n    alert('YOU WIN!');\n}\n},\n\nresetSelections(card) {\n\ncard.cardInfo.below = null;\ncard = null;\n\nreturn card;\n},\n\ndragRowCards(card) {\n\nconst cardParent = card.parentNode;\nconst isLastCard = card === cardParent.lastElementChild;\n\nif (!isLastCard) {\n\n    card.cardInfo.below = [];\n\n    for (let i = cardParent.childElementCount - 1; i >= 0; i--) {\n\n        if (cardParent.childNodes[i] === card) {\n            return;\n        }\n\n        card.cardInfo.below.unshift(cardParent.childNodes[i]);\n    }\n}\n}\n\n  },\n  data() {\n    return {\n        globalDeck: [],\n        shuffledDeck: []\n    }\n  },\n  mounted() {\n    this.globalDeck = this.createDeck();\n    this.shuffledDeck = this.shuffleCards(this.globalDeck);\n    this.putCardsInDeck(this.shuffledDeck);\n    this.distributeCards();\n  }\n\n\n\n\n// const deck = document.getElementById('deck');\n// deck.addEventListener('click', checkDeckCards);\n\n// const cards = document.getElementsByClassName('card');\n// for (let i = 0; i < cards.length; i++) {\n// cards[i].addEventListener('click', turnCard);\n// }\n\n// let selectedCard = null;\n\n// document.addEventListener(\"dragstart\", event => {\n// if (event.target.draggable) {\n//     selectedCard = event.target;\n//     dragRowCards(selectedCard);\n// }\n// });\n\n// document.addEventListener(\"dragover\", event => {\n// event.preventDefault();\n// }, false);\n\n// document.addEventListener(\"drop\", event => {\n// event.preventDefault();\n// dropCard(event, selectedCard);\n// selectedCard = resetSelections(selectedCard);\n// checkGameOver();\n// });\n  }\n\n</script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&family=Poppins:wght@300;400;500;600&display=swap');\n\nhtml,\nbody {\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  background-color: #f7f7f7;\n  background-color: #147246;\n  font: 400 1.2em sans-serif;\n  line-height: 1.2;\n  user-select: none;\n}\n\n.container {\n  width: fit-content;\n  height: 100%;\n  margin: 0 auto;\n}\n\n\n.card {\n  padding: 0;\n  margin: 2vmin;\n  width: 7.6vmin;\n  height: 11vmin;\n  box-shadow: inset 0px 0px 1vmin 0.2vmin #c3c6c6;\n  border-radius: 0.8vmin; \n  background-color: #f5f9fa;\n  font-family: Roboto;\n}\n\n.card-rank {\n  width: 48%;\n  float: left;\n  margin-left: 0.4vmin;\n  margin-right: 0.3vmin;\n  letter-spacing: -0.8vmin;\n  font-size: 4vmin;\n  font-weight: 500;\n}\n\n.card-suit-small {\n  width: 40%;\n  float: left;\n  font-size: 4vmin;\n}\n\n.card-suit-big {\n  width: 100%;\n  height: inherit;\n  line-height: 0.6;\n  font-size: 8vmin;\n  text-align: center;\n}\n\n@-moz-document url-prefix() {\n  .card-rank {\n    margin-right: 0.3vmin;\n    font-size: 4vmin;\n  }\n  \n  .card-suit-small {\n    line-height: 1.6;\n    font-size: 3vmin;\n  }\n  \n  .card-suit-big {\n    line-height: 0.8;\n    font-size: 7vmin;\n  }\n}\n\n\n.card.diamond .inner-info,\n.card.heart .inner-info {\n  background: linear-gradient(to right, #c21f02, #ff2802, #c21f02, #ff2802, #c21f02);\n  -webkit-background-clip: text;\n  color: transparent;\n}\n\n.card.club .inner-info,\n.card.spade .inner-info {\n  background: linear-gradient(to right, #242222, #534f51, #242222, #534f51, #242222);\n  -webkit-background-clip: text;\n  color: transparent;\n}\n\n.back {\n  box-shadow: inset 0px 0px 0.2vmin 0.2vmin #0a2f41;\n  background: linear-gradient(315deg, #242222, #534f51, #242222, #534f51, #242222);\n  background: linear-gradient(315deg, #0a3142, #104c66, #12506b, #1b7ca5, #2195ca);\n}\n\n.top-area {\n  padding-top: 2vmin;\n  width: 100vw;\n  height: 16vmin;\n  background-color: #1b4934;\n}\n\n.left-area,\n.right-area {\n  display: flex;\n  place-content: center;\n  float: left;\n}\n\n.left-area {\n  width: 41vmin;\n}\n\n.right-area {\n  width: 57vmin;\n}\n\n.deck {\n  margin: 2vmin;\n  width: 7.6vmin;\n  height: 11vmin;\n  box-shadow: inset 0px 0px 0vmin 0.5vmin #c3c6c644;\n  border-radius: 0.8vmin;\n  background-color: #c3c6c60c;\n  position: relative;\n}\n\n.deck::before {\n  content: \"‚ü≤\";\n  width: 100%;\n  height: inherit;\n  line-height: 1.6;\n  font-size: 7vmin;\n  text-align: center;\n  color: #c3c6c644;\n  position: absolute;\n  cursor: pointer;\n}\n\n.deck .card {\n  position: absolute;\n  transform: translateX(-2vmin) translateY(-2vmin);\n  cursor: pointer;\n}\n\n.top-cards {\n  width: 55%;\n  display: flex;\n}\n\n.top-cards .card {\n  margin-right: -5vmin;\n}\n\n\n.pile {\n  padding: 0;\n  margin: 2vmin;\n  width: 7.6vmin;\n  height: 11vmin;\n  box-shadow: inset 0px 0px 0vmin 0.5vmin #c3c6c644;\n  border-radius: 0.8vmin;\n  background-color: #c3c6c60c;\n  position: relative;\n}\n\n.pile span {\n  width: 100%;\n  height: inherit;\n  line-height: 1.4;\n  font-size: 8vmin;\n  text-align: center;\n  color: #c3c6c644;\n  position: absolute;\n}\n\n\n.pile .card {\n  position: absolute;\n  transform: translateX(-2vmin) translateY(-2vmin);\n}\n\n.bottom-area {\n  display: flex;\n  place-content: center;\n  width: 100vmin;\n  min-height: 100%;\n  height: fit-content;\n  padding-top: 4vmin;\n  padding-bottom: 10vmin;\n}\n\n.row {\n  display: grid;\n  margin-right: 1%;\n  width: 12%;\n  height: 100%;\n  position: relative;\n}\n\n.row::before {\n  content: \"\";\n  width: 7.6vmin;\n  height: 11vmin;\n  box-shadow: inset 0px 0px 0vmin 0.5vmin #c3c6c644;\n  border-radius: 0.8vmin;\n  background-color: #c3c6c60c;\n  transform: translateX(2vmin) translateY(2vmin);\n  position: absolute;\n}\n\n.row .card {\n  position: relative;\n}\n\n.row .card:not(:first-child) {\n  margin-top: -8vmin;\n}\n\nfooter {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  height: fit-content;\n  margin-top: 25vmin;\n  padding: 1vmin 0;\n  background-color: #1e1f26;\n  font-size: 1.6vmin;\n}\n\nfooter p {\n  margin: 1vmin;\n  text-align: center;\n  color: #F5F5F5;\n  font-family: Poppins;\n}\n\nfooter a:link {\n  color: #b3a290;\n}\nfooter a:visited {\n  color: #91d4d0;\n}\nfooter a:hover {\n  color: #ff3300;\n}\nfooter a:active {\n  color: #ff3300;\n}\n\n.name-dark {\n  color: #91d4d0;\n  text-decoration: none;\n  background: linear-gradient(to right, #91d4d0 50%, #ff3300 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}