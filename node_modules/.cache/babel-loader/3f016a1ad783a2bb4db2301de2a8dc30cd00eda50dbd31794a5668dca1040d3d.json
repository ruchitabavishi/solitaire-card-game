{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"root\"\n};\nconst _hoisted_2 = {\n  class: \"top-area\"\n};\nconst _hoisted_3 = {\n  class: \"left-area\"\n};\nconst _hoisted_4 = {\n  class: \"deck-container\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"card bg-white\"\n};\nconst _hoisted_6 = {\n  class: \"right-area\"\n};\nconst _hoisted_7 = [\"id\"];\nconst _hoisted_8 = {\n  class: \"card-details\"\n};\nconst _hoisted_9 = {\n  class: \"bottom-container\"\n};\nconst _hoisted_10 = [\"onDragstart\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", {\n    class: \"card closed-card\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.onDeckClick && $options.onDeckClick(...args))\n  }), $data.currentOpenCardInDec ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"card-details\", `${$data.currentOpenCardInDec.color}`])\n  }, [_createElementVNode(\"div\", null, _toDisplayString($data.currentOpenCardInDec.suitSymbol), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString($data.currentOpenCardInDec.rank), 1 /* TEXT */)], 2 /* CLASS */)])) : _createCommentVNode(\"v-if\", true)])]), _createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.pileCards, card => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: card.suitSymbol,\n      class: \"card bg-white\",\n      onDragover: _cache[1] || (_cache[1] = _withModifiers(() => {}, [\"prevent\"])),\n      id: `${card.suitSymbol}`,\n      onDrop: _cache[2] || (_cache[2] = $event => $options.handleDrop($event))\n    }, [_createElementVNode(\"div\", _hoisted_8, _toDisplayString(card.suitSymbol), 1 /* TEXT */)], 40 /* PROPS, NEED_HYDRATION */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.totalRow, row => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: row,\n      class: \"pile-row\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.getPileDec(row), (card, i) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: i,\n        class: _normalizeClass([\"card\", card.isOpen ? 'bg-white non-show-card' : 'closed-card non-show-card']),\n        onDragstart: $event => $options.handleDragStart(card, _ctx.$e),\n        draggable: \"true\"\n      }, [card.isOpen ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 0,\n        class: _normalizeClass([\"card-details\", `${card.color}`])\n      }, [_createElementVNode(\"div\", null, _toDisplayString(card.suitSymbol), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString(card.rank), 1 /* TEXT */)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true)], 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_10);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","onClick","_cache","args","$options","onDeckClick","$data","currentOpenCardInDec","_hoisted_5","_normalizeClass","color","_toDisplayString","suitSymbol","rank","_createCommentVNode","_hoisted_6","_Fragment","_renderList","pileCards","card","onDragover","_withModifiers","id","onDrop","$event","handleDrop","_hoisted_8","_hoisted_7","_hoisted_9","totalRow","row","getPileDec","i","isOpen","onDragstart","handleDragStart","_ctx","$e","draggable","_hoisted_10"],"sources":["/Users/ruchita/ruchita-projects/simple-card-game/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"root\">\n    <div class=\"top-area\">\n        <div class=\"left-area\">\n          <div class=\"deck-container\">\n            <div class=\"card closed-card\" @click=\"onDeckClick\"></div>\n            <div v-if=\"currentOpenCardInDec\" class=\"card bg-white\">\n              <div class=\" card-details\" :class=\"`${currentOpenCardInDec.color}`\">\n                <div> {{ currentOpenCardInDec.suitSymbol}}</div>\n                <div> {{currentOpenCardInDec.rank}} </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"right-area\">\n          <div v-for=\"card in pileCards\" :key=card.suitSymbol class=\"card bg-white\" @dragover.prevent :id=\"`${card.suitSymbol}`\" @drop=\"handleDrop($event)\">\n              <div class=\"card-details\" >{{card.suitSymbol}}</div>\n          </div>\n        </div>\n\n    </div>\n\n    <div class=\"bottom-container\">\n      <div v-for=\"row in totalRow\" :key='row' class=\"pile-row\">\n            <div v-for=\"(card,i) in getPileDec(row)\" :key='i' class=\"card \"\n             :class=\"card.isOpen ? 'bg-white non-show-card': 'closed-card non-show-card'\" @dragstart=\"handleDragStart(card,$e)\" draggable=\"true\">\n              <div v-if=\"card.isOpen\" class=\"card-details\" :class=\"`${card.color}`\">\n                <div> {{ card.suitSymbol}}</div>\n                <div> {{card.rank}} </div>\n              </div>\n          </div>\n      </div>\n    </div>\n\n  </div>  \n</template>\n\n<script>\n  const cardRanking = ['A', '2', '3', '4', '5',\n              '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  const cardSuits = ['spade', 'heart', 'diamond', 'club'];\n\n\n\n  // 24 cards in deck\n  // 28 card distributed\n  export default {\n      data() {\n        return {\n          currentOpenCardInDec: null,\n          remaininDecNextIndex: 0,\n          totalRow: [0,1,2,3,4,5,6],\n          globalDeck: [],\n          shuffledDeck: [],\n          pileCards: [\n            {\n              suitSymbol:'‚ô†',\n              spade: 'spade',\n              cardColor :'black',\n              rank: null\n            },\n            {\n              suitSymbol:'‚ô•',\n              cardColor :'red',\n              rank: null\n            },\n            {\n              suitSymbol:'‚ô¶',\n              cardColor :'red',\n              rank: null\n            },\n            {\n              suitSymbol:'‚ô£',\n              cardColor :'black',\n              rank: null\n            },\n          ],\n          remainingDeck: [],\n          pileDeck: {}\n\n        }\n      },\n      methods: {\n        handleDragStart(card, event) {\n          console.log(card,\"this is dragging card\")\n        },\n        handleDrop(e) {\n          console.log(\"this is drop\", e)\n        },\n        onDeckClick() {\n          this.currentOpenCardInDec = this.remainingDeck[this.remaininDecNextIndex]\n          this.remaininDecNextIndex++;\n\n          if(this.remaininDecNextIndex == (this.remainingDeck.length) ) {\n            this.showDeckResetIcon = true;\n            this.remaininDecNextIndex = 0\n            return\n          }\n\n        },\n        getPileDec(index) {\n          return this.pileDeck[`row-${index}`]\n        },\n        createCard(rank, suit, higher) {\n          \n          let suitSymbol, cardColor;\n          switch (suit) {\n              case 'spade':\n                  suitSymbol = '‚ô†';\n                  cardColor = 'black';\n                  break;\n              case 'heart':\n                  suitSymbol = '‚ô•';\n                  cardColor = 'red';\n                  break;\n              case 'diamond':\n                  suitSymbol = '‚ô¶';\n                  cardColor = 'red';\n                  break;\n              case 'club':\n                  suitSymbol = '‚ô£';\n                  cardColor = 'black';\n                  break;\n              default:\n                  suitSymbol = 'üÉè';\n                  cardColor = 'black';\n                  break;\n          }\n\n          return {\n            suitSymbol: suitSymbol,\n              rank,\n              higher,\n              suit,\n              color: cardColor,\n              below: null\n          }\n        },\n        createDeck() {\n          const deck = [];\n          for (let i = 0; i < cardSuits.length; i++) {\n            for (let j = 0; j < cardRanking.length; j++) {  \n\n              const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n              const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n              deck.push(newCard);\n            }\n          }\n          console.log(deck,\"this is complete deck\")\n          return deck;\n\n        },\n        handleDropEvent(element) {\n          console.log(element,\"this is drop element taget\")\n        },\n\n        distributeCards() {\n          const totalRow = 7; \n          this.remainingDeck = this.globalDeck;\n         \n          // each row will have index+1 card \n          // eg: 0th index  -  1 card and index(0th) card will be opne \n          // eg: 7th row: index - 6 and 7th (index actually) card will be open \n\n          for(let i=0; i< totalRow; i++) {\n            this.pileDeck[`row-${i}`] = []\n              for(let j=0; j<= i; j++) {\n                const card = this.remainingDeck[this.remainingDeck.length - 1]\n                card.isOpen = false\n                \n                if(j == i) {  \n                  card.isOpen = true\n                   \n                }\n                this.pileDeck[`row-${i}`].push(card)\n                // remove card from remaining card deck \n                this.remainingDeck.pop()\n              }\n          }\n          console.log(this.pileDeck,\"this is pile deck\")\n        },\n        shuffleCards(deck) {\n         return deck.sort(() => Math.random() - 0.5);\n       },\n      },\n      checkCardCanBeDropeed() {\n\n      },\n      mounted() {\n        this.globalDeck = this.createDeck();\n        this.shuffledDeck = this.shuffleCards(this.globalDeck)\n        this.distributeCards()\n      },\n      created() {\n      }\n  }\n\n</script>\n\n<style scoped>\n.root {\n  position: relative;\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.top-area {\n  justify-content: space-around;\n  align-items: center;\n  min-height: 30%;\n  background: darkgreen;\n  display: flex;\n}\n\n.right-area {\n  width: 45%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.closed-card {\n  background: skyblue;\n}\n\n.bg-white {\n  background: white;\n}\n\n\n.card {\n  display: flex;\n  border-radius: 8px;\n  width: 100px;\n  height: 150px;\n  border: black solid 1px;\n  box-shadow: 0cm;\n}\n.red {\n  color: red\n}\n\n.black {\n  color: black\n}\n\n.card-details {\n  margin:auto;\n  align-content: center;\n  font-size: 60px;\n}\n.bottom-container {\n  padding-top: 60px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  justify-content: space-around;\n  background: lightgreen;\n}\n.pile-row {\n  display: flex;\n  flex-direction: column;\n}\n.pile-row .card:not(:first-child) {\n  margin-top: -100px;\n}\n.deck-container {\n  display: flex;\n}\n.pile-column {\n  display: flex;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAAU;;EACZA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAgB;;EAJrCC,GAAA;EAM6CD,KAAK,EAAC;;;EAQtCA,KAAK,EAAC;AAAY;mBAd/B;;EAgBmBA,KAAK,EAAC;AAAc;;EAM9BA,KAAK,EAAC;AAAkB;oBAtBjC;;uBACEE,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCJC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBFD,mBAAA,CAUM,OAVNE,UAUM,GATJF,mBAAA,CAQM,OARNG,UAQM,GAPJH,mBAAA,CAAyD;IAApDJ,KAAK,EAAC,kBAAkB;IAAEQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;MACtCG,KAAA,CAAAC,oBAAoB,I,cAA/BZ,mBAAA,CAKM,OALNa,UAKM,GAJJX,mBAAA,CAGM;IAHDJ,KAAK,EAPxBgB,eAAA,EAOyB,cAAe,KAAYH,KAAA,CAAAC,oBAAoB,CAACG,KAAK;MAC9Db,mBAAA,CAAgD,aAAAc,gBAAA,CAAvCL,KAAA,CAAAC,oBAAoB,CAACK,UAAU,kBACxCf,mBAAA,CAA0C,aAAAc,gBAAA,CAAlCL,KAAA,CAAAC,oBAAoB,CAACM,IAAI,iB,sBATjDC,mBAAA,e,KAcQjB,mBAAA,CAIM,OAJNkB,UAIM,I,kBAHJpB,mBAAA,CAEMqB,SAAA,QAjBhBC,WAAA,CAe8BX,KAAA,CAAAY,SAAS,EAAjBC,IAAI;yBAAhBxB,mBAAA,CAEM;MAF0BD,GAAG,EAACyB,IAAI,CAACP,UAAU;MAACnB,KAAK,EAAC,eAAe;MAAE2B,UAAQ,EAAAlB,MAAA,QAAAA,MAAA,MAf7FmB,cAAA,CAeoF,QAAiB;MAAEC,EAAE,KAAKH,IAAI,CAACP,UAAU;MAAKW,MAAI,EAAArB,MAAA,QAAAA,MAAA,MAAAsB,MAAA,IAAEpB,QAAA,CAAAqB,UAAU,CAACD,MAAM;QAC3I3B,mBAAA,CAAoD,OAApD6B,UAAoD,EAAAf,gBAAA,CAAvBQ,IAAI,CAACP,UAAU,iB,kCAhB1De,UAAA;sCAsBI9B,mBAAA,CAUM,OAVN+B,UAUM,I,kBATJjC,mBAAA,CAQMqB,SAAA,QA/BZC,WAAA,CAuByBX,KAAA,CAAAuB,QAAQ,EAAfC,GAAG;yBAAfnC,mBAAA,CAQM;MARwBD,GAAG,EAAEoC,GAAG;MAAErC,KAAK,EAAC;2BACxCE,mBAAA,CAMIqB,SAAA,QA9BhBC,WAAA,CAwBoCb,QAAA,CAAA2B,UAAU,CAACD,GAAG,GAxBlD,CAwByBX,IAAI,EAACa,CAAC;2BAAnBrC,mBAAA,CAMI;QANsCD,GAAG,EAAEsC,CAAC;QAAEvC,KAAK,EAxBnEgB,eAAA,EAwBoE,MAAO,EACtDU,IAAI,CAACc,MAAM;QAA2DC,WAAS,EAAAV,MAAA,IAAEpB,QAAA,CAAA+B,eAAe,CAAChB,IAAI,EAACiB,IAAA,CAAAC,EAAE;QAAGC,SAAS,EAAC;UACjHnB,IAAI,CAACc,MAAM,I,cAAtBtC,mBAAA,CAGM;QA7BpBD,GAAA;QA0BsCD,KAAK,EA1B3CgB,eAAA,EA0B4C,cAAc,KAAYU,IAAI,CAACT,KAAK;UAChEb,mBAAA,CAAgC,aAAAc,gBAAA,CAAvBQ,IAAI,CAACP,UAAU,kBACxBf,mBAAA,CAA0B,aAAAc,gBAAA,CAAlBQ,IAAI,CAACN,IAAI,iB,oBA5BjCC,mBAAA,e,yCAAAyB,WAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}