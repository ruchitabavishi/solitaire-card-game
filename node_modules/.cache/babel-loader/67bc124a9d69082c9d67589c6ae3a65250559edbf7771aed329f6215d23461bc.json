{"ast":null,"code":"import { createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"root\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"top-area\\\" data-v-469af010><div class=\\\"left-area\\\" data-v-469af010><div class=\\\"card\\\" data-v-469af010></div></div><div class=\\\"right-area\\\" data-v-469af010></div></div><div class=\\\"bottom-container\\\" data-v-469af010></div>\", 2);\nconst _hoisted_4 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [..._hoisted_4]);\n}","map":{"version":3,"names":["class","_createStaticVNode","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_4"],"sources":["/Users/ruchita/ruchita-projects/simple-card-game/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"root\">\n    <div class=\"top-area\">\n        <div class=\"left-area \">\n            <div class=\"card\"></div>\n        </div>\n        <div class=\"right-area\">\n\n        </div>\n\n    </div>\n\n    <div class=\"bottom-container\">\n    </div>\n\n  </div>  \n</template>\n\n<script>\n  const cardRanking = ['A', '2', '3', '4', '5',\n              '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  const cardSuits = ['spade', 'heart', 'diamond', 'club'];\n  export default {\n      data() {\n        return {\n          globalDeck: [],\n          shuffledDeck: [],\n\n        }\n      },\n      methods: {\n        createCard(rank, suit, higher) {\n          \n          let suitSymbol, cardColor;\n          switch (suit) {\n              case 'spade':\n                  suitSymbol = '‚ô†';\n                  cardColor = 'black';\n                  break;\n              case 'heart':\n                  suitSymbol = '‚ô•';\n                  cardColor = 'red';\n                  break;\n              case 'diamond':\n                  suitSymbol = '‚ô¶';\n                  cardColor = 'red';\n                  break;\n              case 'club':\n                  suitSymbol = '‚ô£';\n                  cardColor = 'black';\n                  break;\n              default:\n                  suitSymbol = 'üÉè';\n                  cardColor = 'black';\n                  break;\n          }\n\n          // let frontInnerHTML = `<div class=\"inner-info card-rank\">${rank}</div>`;\n          // frontInnerHTML += `<div class=\"inner-info card-suit-small\">${suitSymbol}</div>`;\n          // frontInnerHTML += `<div class=\"inner-info card-suit-big\">${suitSymbol}</div>`;\n\n          return {\n            suitSymbol: suitSymbol,\n              rank,\n              higher,\n              // inner: frontInnerHTML,\n              suit,\n              color: cardColor,\n              below: null\n          }\n        },\n        createDeck() {\n          const deck = [];\n          for (let i = 0; i < cardSuits.length; i++) {\n            for (let j = 0; j < cardRanking.length; j++) {  \n\n              const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n              const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n              deck.push(newCard);\n            }\n          }\n          console.log(deck,\"this is complete deck\")\n          return deck;\n\n        },\n      },\n      mounted() {\n        this.globalDeck = this.createDeck();\n      }\n  }\n\n</script>\n\n<style scoped>\n.root {\n  position: relative;\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.top-area {\n  justify-content: center;\n  align-items: center;\n  height: 30%;\n  background: darkgreen;\n  display: flex;\n}\n\n.card {\n  width: 100px;\n  height: 200px;\n  border: black soli 1px;\n  box-shadow: 0cm;\n  background: skyblue;\n}\n\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAM;gCADnBC,kBAAA;oBAEIC,UAQM,C;;uBATRC,mBAAA,CAcM,OAdNC,UAcM,EAfR,IAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}