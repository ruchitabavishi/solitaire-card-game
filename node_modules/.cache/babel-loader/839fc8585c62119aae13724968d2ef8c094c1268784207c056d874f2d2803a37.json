{"ast":null,"code":"import { createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"top-area\\\" data-v-469af010><div class=\\\"container\\\" data-v-469af010><div class=\\\"left-area\\\" data-v-469af010><div id=\\\"deck\\\" class=\\\"deck\\\" data-v-469af010></div><div id=\\\"top-cards\\\" class=\\\"top-cards\\\" data-v-469af010></div></div><div class=\\\"right-area\\\" data-v-469af010><div class=\\\"pile\\\" data-v-469af010><span id=\\\"spade-cards\\\" data-v-469af010>‚ô†</span></div><div class=\\\"pile\\\" data-v-469af010><span id=\\\"heart-cards\\\" data-v-469af010>‚ô•</span></div><div class=\\\"pile\\\" data-v-469af010><span id=\\\"diamond-cards\\\" data-v-469af010>‚ô¶</span></div><div class=\\\"pile\\\" data-v-469af010><span id=\\\"club-cards\\\" data-v-469af010>‚ô£</span></div></div></div></div><div class=\\\"container\\\" data-v-469af010><div class=\\\"bottom-area\\\" data-v-469af010><div class=\\\"row\\\" data-v-469af010></div><div class=\\\"row\\\" data-v-469af010></div><div class=\\\"row\\\" data-v-469af010></div><div class=\\\"row\\\" data-v-469af010></div><div class=\\\"row\\\" data-v-469af010></div><div class=\\\"row\\\" data-v-469af010></div><div class=\\\"row\\\" data-v-469af010></div></div></div>\", 2);\nconst _hoisted_3 = [_hoisted_1];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [..._hoisted_3]);\n}","map":{"version":3,"names":["_createStaticVNode","_hoisted_1","_createElementBlock","_hoisted_3"],"sources":["/Users/ruchita/ruchita-projects/simple-card-game/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n <div>\n  <div class=\"top-area\">\n  <div class=\"container\">\n    <div class=\"left-area\">\n      <div id=\"deck\" class=\"deck\"></div>\n      <div id=\"top-cards\" class=\"top-cards\"></div>\n    </div>\n    <div class=\"right-area\">\n      <div class=\"pile\"><span id=\"spade-cards\">‚ô†</span></div>\n      <div class=\"pile\"><span id=\"heart-cards\">‚ô•</span></div>\n      <div class=\"pile\"><span id=\"diamond-cards\">‚ô¶</span></div>\n      <div class=\"pile\"><span id=\"club-cards\">‚ô£</span></div>\n    </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"bottom-area\">\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n    <div class=\"row\"></div>\n  </div>\n</div>\n\n\n </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  methods:{\n    createCard(rank, suit, higher) {\n\n      let suitSymbol, cardColor;\n      switch (suit) {\n          case 'spade':\n              suitSymbol = '‚ô†';\n              cardColor = 'black';\n              break;\n          case 'heart':\n              suitSymbol = '‚ô•';\n              cardColor = 'red';\n              break;\n          case 'diamond':\n              suitSymbol = '‚ô¶';\n              cardColor = 'red';\n              break;\n          case 'club':\n              suitSymbol = '‚ô£';\n              cardColor = 'black';\n              break;\n          default:\n              suitSymbol = 'üÉè';\n              cardColor = 'black';\n              break;\n      }\n\n      let frontInnerHTML = `<div class=\"inner-info card-rank\">${rank}</div>`;\n      frontInnerHTML += `<div class=\"inner-info card-suit-small\">${suitSymbol}</div>`;\n      frontInnerHTML += `<div class=\"inner-info card-suit-big\">${suitSymbol}</div>`;\n\n      return {\n          rank,\n          higher,\n          inner: frontInnerHTML,\n          suit,\n          color: cardColor,\n          below: null\n      }\n    },\n\n    createDeck() {\n\n      const cardRanking = ['A', '2', '3', '4', '5',\n          '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n\n      const cardSuits = ['spade', 'heart', 'diamond', 'club'];\n\n      const deck = [];\n\n      for (let i = 0; i < cardSuits.length; i++) {\n          for (let j = 0; j < cardRanking.length; j++) {\n\n              const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n              const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n              deck.push(newCard);\n\n          }\n\n      }\n\n      return deck;\n\n    },\n    shuffleCards(deck) {\n      return deck.sort(() => Math.random() - 0.5);\n    },\n\n    putCardsInDeck(cards) {\n\n      const deck = document.getElementById('deck');\n\n      cards.forEach(() => {\n          deck.innerHTML += `<div class=\"card back\"></div>`;\n      });\n\n      const cardsInDeck = deck.querySelectorAll('.card');\n\n      cards.forEach((card, index) => {\n          cardsInDeck[index].cardInfo = card;\n      });\n\n    },\n\n    turnCard() {\n\n      const isLastCard = this === this.parentNode.lastElementChild;\n      const isCardVisible = this.style.visibility !== 'hidden';\n      const isCardFacingDown = this.classList.contains('back');\n\n      if (isLastCard && isCardVisible) {\n\n          if (isCardFacingDown) {\n          \n              this.classList.remove('back');\n              this.classList.add(`${this.cardInfo.suit}`);\n              this.innerHTML = this.cardInfo.inner;\n          }\n\n          this.setAttribute('draggable', true);\n      }\n\n    },\n\nturnCardBack(card) {\n\ncard.classList.remove(`${card.cardInfo.suit}`);\ncard.classList.add('back');\ncard.innerHTML = '';\ncard.setAttribute('draggable', false);\n\n},\n\ndistributeCards() {\n\nconst piles = document.querySelectorAll('.row');\n\npiles.forEach((pile, index) => {\n    \n    for (let i = 0; i < index + 1; i++) {\n\n        const deck = document.getElementById('deck');\n        const topCard = deck.lastElementChild;\n\n        if (i === index) {\n            this.turnCard.apply(topCard);\n        }\n\n        deck.removeChild(topCard);\n        pile.append(topCard);\n    }\n\n});\n\n},\n\n\nshowTopCard(topCards, deck, deckTopCard) {\n\nif (deckTopCard.cardInfo) {\n\n    deck.removeChild(deckTopCard);\n    topCards.append(deckTopCard);\n    \n    if (topCards.childElementCount > 1) {\n        topCards.childNodes[0].setAttribute('draggable', false);\n    }\n\n    if (topCards.childElementCount > 2) {\n        topCards.childNodes[1].setAttribute('draggable', false);\n    }\n\n    if (topCards.childElementCount > 3) {\n\n        topCards.childNodes[2].setAttribute('draggable', false);\n\n        const firstCard = topCards.firstElementChild;\n\n        this.turnCardBack(firstCard);\n        firstCard.style.visibility = 'hidden';\n\n        topCards.removeChild(firstCard);\n        deck.prepend(firstCard);\n    }\n\n}\n\n},\n\nreturnCardsToDeck(topCards, deck) {\n\nconst cardsToDeck = [];\n\ntopCards.childNodes.forEach(card => {\n    this.turnCardBack(card);\n    card.style.visibility = 'hidden';\n    cardsToDeck.push(card);\n});\n\ncardsToDeck.forEach(card => {\n    deck.prepend(card);\n});\n\ntopCards.innerHTML = '';\n\nconst cardsInDeck = deck.querySelectorAll('.card');\n\ncardsInDeck.forEach(card => {\n    card.style.visibility = 'visible';\n});\n\n\n},\n\ncheckDeckCards() {\n\nconst topCards = document.getElementById('top-cards');\nconst deck = document.getElementById('deck');\nconst deckTopCard = deck.lastElementChild;\n\nif (!deckTopCard) {\n    this.returnCardsToDeck(topCards, deck);\n} else if (deckTopCard.style.visibility === 'hidden') {\n    this.returnCardsToDeck(topCards, deck);\n} else {\n    this.showTopCard(topCards, deck, deckTopCard);\n}\n\n},\n\n\nchangeCardPosition(cardToDrop, dropSpot, checkCondition) {\n\nif (checkCondition) {\n\n    const cardAbove = cardToDrop.previousSibling;\n\n    cardToDrop.parentNode.removeChild(cardToDrop);\n    dropSpot.append(cardToDrop);\n\n    if (cardToDrop.cardInfo.below) {\n        cardToDrop.cardInfo.below.forEach(card => dropSpot.append(card));\n    }\n\n    return cardAbove;\n}\n\n},\n\ndropInRow(cardToDrop, dropSpot) {\n\nconst cardToDropInfo = cardToDrop.cardInfo;\nconst lastCardInRow = dropSpot.lastElementChild;\n\nif (lastCardInRow) {\n\n    const lastCardInfo = lastCardInRow.cardInfo;\n\n    if (lastCardInfo && lastCardInRow.draggable) {\n\n        const checkRank = lastCardInfo.rank === cardToDropInfo.higher;\n        const checkColor = lastCardInfo.color !== cardToDropInfo.color;\n\n        return changeCardPosition(cardToDrop, dropSpot, (checkRank && checkColor));\n    }\n\n} else {\n\n    const checkRank = cardToDrop.cardInfo.rank === 'K';\n\n    return changeCardPosition(cardToDrop, dropSpot, checkRank);\n\n}\n},\n\ndropInPile(cardToDrop, dropSpot) {\n\nconst cardToDropInfo = cardToDrop.cardInfo;\nconst lastCardInPile = dropSpot.lastElementChild;\n\nif (!cardToDropInfo.below) {\n\n    if (lastCardInPile) {\n\n        const lastCardInfo = lastCardInPile.cardInfo;\n\n        if (lastCardInfo) {\n\n            const checkRank = lastCardInfo.higher === cardToDropInfo.rank;\n            const checkSuit = lastCardInfo.suit === cardToDropInfo.suit;\n\n            if (checkRank && checkSuit) {\n                lastCardInPile.setAttribute('draggable', false);\n            }\n\n            return changeCardPosition(cardToDrop, dropSpot, (checkRank && checkSuit));\n\n        } else {\n\n            const checkRank = cardToDropInfo.rank === 'A';\n            const checkSuit = lastCardInPile.id.split('-')[0] === cardToDropInfo.suit;\n\n            return changeCardPosition(cardToDrop, dropSpot, (checkRank && checkSuit));\n        }\n\n    }\n}\n},\n\ndropCard(event, cardToDrop) {\n\nconst tgt = event.target;\n\nconst findSpot = function (element, htmlClass) {\n\n    const classList = element.classList;\n\n    if (classList) {\n\n        if (classList.contains(htmlClass)) {\n            return element;\n\n        } else {\n            return findSpot(element.parentNode, htmlClass);\n\n        } \n\n    }\n\n    return;\n\n}\n\nconst dropSpot = findSpot(tgt, 'row') || findSpot(tgt, 'pile');\n\nlet cardAbove;\n\nif (dropSpot) {\n\n    if (dropSpot.classList.contains('row')) {\n\n        cardAbove = dropInRow(cardToDrop, dropSpot);\n\n    } else if (dropSpot.classList.contains('pile')) {\n\n        cardAbove = dropInPile(cardToDrop, dropSpot);\n\n    }\n\n}\n\nif (cardAbove) {\n    this.turnCard.apply(cardAbove);\n}\n\n},\n\ncheckGameOver() {\n\nconst piles = document.querySelectorAll('.pile');\n\nlet allPilesComplete =  true;\n\npiles.forEach(pile => {\n    allPilesComplete = allPilesComplete && (pile.childElementCount - 1) === 13;\n});\n\nif (allPilesComplete) {\n    alert('YOU WIN!');\n}\n},\n\nresetSelections(card) {\n\ncard.cardInfo.below = null;\ncard = null;\n\nreturn card;\n},\n\ndragRowCards(card) {\n\nconst cardParent = card.parentNode;\nconst isLastCard = card === cardParent.lastElementChild;\n\nif (!isLastCard) {\n\n    card.cardInfo.below = [];\n\n    for (let i = cardParent.childElementCount - 1; i >= 0; i--) {\n\n        if (cardParent.childNodes[i] === card) {\n            return;\n        }\n\n        card.cardInfo.below.unshift(cardParent.childNodes[i]);\n    }\n}\n}\n\n  },\n  data() {\n    return {\n        globalDeck: [],\n        shuffledDeck: []\n    }\n  },\n  mounted() {\n    this.globalDeck = createDeck();\n    this.shuffledDeck = shuffleCards(globalDeck);\n    this.putCardsInDeck(shuffledDeck);\n    this.distributeCards();\n  }\n\n\n\n\n// const deck = document.getElementById('deck');\n// deck.addEventListener('click', checkDeckCards);\n\n// const cards = document.getElementsByClassName('card');\n// for (let i = 0; i < cards.length; i++) {\n// cards[i].addEventListener('click', turnCard);\n// }\n\n// let selectedCard = null;\n\n// document.addEventListener(\"dragstart\", event => {\n// if (event.target.draggable) {\n//     selectedCard = event.target;\n//     dragRowCards(selectedCard);\n// }\n// });\n\n// document.addEventListener(\"dragover\", event => {\n// event.preventDefault();\n// }, false);\n\n// document.addEventListener(\"drop\", event => {\n// event.preventDefault();\n// dropCard(event, selectedCard);\n// selectedCard = resetSelections(selectedCard);\n// checkGameOver();\n// });\n  }\n\n</script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&family=Poppins:wght@300;400;500;600&display=swap');\n\nhtml,\nbody {\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  background-color: #f7f7f7;\n  background-color: #147246;\n  font: 400 1.2em sans-serif;\n  line-height: 1.2;\n  user-select: none;\n}\n\n.container {\n  width: fit-content;\n  height: 100%;\n  margin: 0 auto;\n}\n\n\n.card {\n  padding: 0;\n  margin: 2vmin;\n  width: 7.6vmin;\n  height: 11vmin;\n  box-shadow: inset 0px 0px 1vmin 0.2vmin #c3c6c6;\n  border-radius: 0.8vmin; \n  background-color: #f5f9fa;\n  font-family: Roboto;\n}\n\n.card-rank {\n  width: 48%;\n  float: left;\n  margin-left: 0.4vmin;\n  margin-right: 0.3vmin;\n  letter-spacing: -0.8vmin;\n  font-size: 4vmin;\n  font-weight: 500;\n}\n\n.card-suit-small {\n  width: 40%;\n  float: left;\n  font-size: 4vmin;\n}\n\n.card-suit-big {\n  width: 100%;\n  height: inherit;\n  line-height: 0.6;\n  font-size: 8vmin;\n  text-align: center;\n}\n\n@-moz-document url-prefix() {\n  .card-rank {\n    margin-right: 0.3vmin;\n    font-size: 4vmin;\n  }\n  \n  .card-suit-small {\n    line-height: 1.6;\n    font-size: 3vmin;\n  }\n  \n  .card-suit-big {\n    line-height: 0.8;\n    font-size: 7vmin;\n  }\n}\n\n\n.card.diamond .inner-info,\n.card.heart .inner-info {\n  background: linear-gradient(to right, #c21f02, #ff2802, #c21f02, #ff2802, #c21f02);\n  -webkit-background-clip: text;\n  color: transparent;\n}\n\n.card.club .inner-info,\n.card.spade .inner-info {\n  background: linear-gradient(to right, #242222, #534f51, #242222, #534f51, #242222);\n  -webkit-background-clip: text;\n  color: transparent;\n}\n\n.back {\n  box-shadow: inset 0px 0px 0.2vmin 0.2vmin #0a2f41;\n  background: linear-gradient(315deg, #242222, #534f51, #242222, #534f51, #242222);\n  background: linear-gradient(315deg, #0a3142, #104c66, #12506b, #1b7ca5, #2195ca);\n}\n\n.top-area {\n  padding-top: 2vmin;\n  width: 100vw;\n  height: 16vmin;\n  background-color: #1b4934;\n}\n\n.left-area,\n.right-area {\n  display: flex;\n  place-content: center;\n  float: left;\n}\n\n.left-area {\n  width: 41vmin;\n}\n\n.right-area {\n  width: 57vmin;\n}\n\n.deck {\n  margin: 2vmin;\n  width: 7.6vmin;\n  height: 11vmin;\n  box-shadow: inset 0px 0px 0vmin 0.5vmin #c3c6c644;\n  border-radius: 0.8vmin;\n  background-color: #c3c6c60c;\n  position: relative;\n}\n\n.deck::before {\n  content: \"‚ü≤\";\n  width: 100%;\n  height: inherit;\n  line-height: 1.6;\n  font-size: 7vmin;\n  text-align: center;\n  color: #c3c6c644;\n  position: absolute;\n  cursor: pointer;\n}\n\n.deck .card {\n  position: absolute;\n  transform: translateX(-2vmin) translateY(-2vmin);\n  cursor: pointer;\n}\n\n.top-cards {\n  width: 55%;\n  display: flex;\n}\n\n.top-cards .card {\n  margin-right: -5vmin;\n}\n\n\n.pile {\n  padding: 0;\n  margin: 2vmin;\n  width: 7.6vmin;\n  height: 11vmin;\n  box-shadow: inset 0px 0px 0vmin 0.5vmin #c3c6c644;\n  border-radius: 0.8vmin;\n  background-color: #c3c6c60c;\n  position: relative;\n}\n\n.pile span {\n  width: 100%;\n  height: inherit;\n  line-height: 1.4;\n  font-size: 8vmin;\n  text-align: center;\n  color: #c3c6c644;\n  position: absolute;\n}\n\n\n.pile .card {\n  position: absolute;\n  transform: translateX(-2vmin) translateY(-2vmin);\n}\n\n.bottom-area {\n  display: flex;\n  place-content: center;\n  width: 100vmin;\n  min-height: 100%;\n  height: fit-content;\n  padding-top: 4vmin;\n  padding-bottom: 10vmin;\n}\n\n.row {\n  display: grid;\n  margin-right: 1%;\n  width: 12%;\n  height: 100%;\n  position: relative;\n}\n\n.row::before {\n  content: \"\";\n  width: 7.6vmin;\n  height: 11vmin;\n  box-shadow: inset 0px 0px 0vmin 0.5vmin #c3c6c644;\n  border-radius: 0.8vmin;\n  background-color: #c3c6c60c;\n  transform: translateX(2vmin) translateY(2vmin);\n  position: absolute;\n}\n\n.row .card {\n  position: relative;\n}\n\n.row .card:not(:first-child) {\n  margin-top: -8vmin;\n}\n\nfooter {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  height: fit-content;\n  margin-top: 25vmin;\n  padding: 1vmin 0;\n  background-color: #1e1f26;\n  font-size: 1.6vmin;\n}\n\nfooter p {\n  margin: 1vmin;\n  text-align: center;\n  color: #F5F5F5;\n  font-family: Poppins;\n}\n\nfooter a:link {\n  color: #b3a290;\n}\nfooter a:visited {\n  color: #91d4d0;\n}\nfooter a:hover {\n  color: #ff3300;\n}\nfooter a:active {\n  color: #ff3300;\n}\n\n.name-dark {\n  color: #91d4d0;\n  text-decoration: none;\n  background: linear-gradient(to right, #91d4d0 50%, #ff3300 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n</style>\n"],"mappings":";;gCAAAA,kBAAA;oBAEEC,UAaI,C;;uBAdLC,mBAAA,CA6BM,aA9BP,IAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}