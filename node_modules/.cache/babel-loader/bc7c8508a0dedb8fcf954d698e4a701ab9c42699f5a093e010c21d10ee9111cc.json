{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"root\"\n};\nconst _hoisted_2 = {\n  class: \"top-area\"\n};\nconst _hoisted_3 = {\n  class: \"left-area\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card closed-card\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"card-details\"\n};\nconst _hoisted_6 = {\n  class: \"right-area\"\n};\nconst _hoisted_7 = {\n  class: \"card-details\"\n};\nconst _hoisted_8 = {\n  class: \"bottom-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", null, _toDisplayString(_ctx.card.suitSymbol), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString(_ctx.card.rank), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.pileCards, card => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: card.suitSymbol,\n      class: \"card bg-white\"\n    }, [_createElementVNode(\"div\", _hoisted_7, _toDisplayString(card.suitSymbol), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.totalRow, row => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: row,\n      class: \"pile-row\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.getPileDec(row), (card, i) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: i,\n        class: _normalizeClass([\"card\", card.isOpne ? 'bg-white non-show-card' : 'closed-card non-show-card'])\n      }, [card.isOpne ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 0,\n        class: _normalizeClass([\"card-details\", `${card.color}`])\n      }, [_createElementVNode(\"div\", null, _toDisplayString(card.suitSymbol), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString(card.rank), 1 /* TEXT */)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","_ctx","card","suitSymbol","rank","_hoisted_6","_Fragment","_renderList","$data","pileCards","key","_hoisted_7","_hoisted_8","totalRow","row","$options","getPileDec","i","_normalizeClass","isOpne","color","_createCommentVNode"],"sources":["/Users/ruchita/ruchita-projects/simple-card-game/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"root\">\n    <div class=\"top-area\">\n        <div class=\"left-area\">\n            <div class=\"card closed-card\"></div>\n            <div class=\"card-details\">\n              <div> {{ card.suitSymbol}}</div>\n                <div> {{card.rank}} </div>\n            </div>\n        </div>\n        <div class=\"right-area\">\n          <div v-for=\"card in pileCards\" :key=card.suitSymbol class=\"card bg-white\">\n              <div class=\"card-details\">{{card.suitSymbol}}</div>\n          </div>\n        </div>\n\n    </div>\n\n    <div class=\"bottom-container\">\n      <div v-for=\"row in totalRow\" :key='row' class=\"pile-row\">\n            <div v-for=\"(card,i) in getPileDec(row)\" :key='i' class=\"card \" :class=\"card.isOpne ? 'bg-white non-show-card': 'closed-card non-show-card'\">\n              <div v-if=\"card.isOpne\" class=\"card-details\" :class=\"`${card.color}`\">\n                <div> {{ card.suitSymbol}}</div>\n                <div> {{card.rank}} </div>\n              </div>\n          </div>\n      </div>\n    </div>\n\n  </div>  \n</template>\n\n<script>\n  const cardRanking = ['A', '2', '3', '4', '5',\n              '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  const cardSuits = ['spade', 'heart', 'diamond', 'club'];\n\n\n\n  // 24 cards in deck\n  // 28 card distributed\n  export default {\n      data() {\n        return {\n          totalRow: [0,1,2,3,4,5,6],\n          globalDeck: [],\n          shuffledDeck: [],\n          pileCards: [\n            {\n              suitSymbol:'‚ô†',\n              cardColor :'black'\n            },\n            {\n              suitSymbol:'‚ô•',\n              cardColor :'red'\n            },\n            {\n              suitSymbol:'‚ô¶',\n              cardColor :'red'\n            },\n            {\n              suitSymbol:'‚ô£',\n              cardColor :'black'\n            },\n          ],\n          remainingDeck: [],\n          pileDeck: {}\n\n        }\n      },\n      methods: {\n        getPileDec(index) {\n        \n          return this.pileDeck[`row-${index}`]\n        },\n        createCard(rank, suit, higher) {\n          \n          let suitSymbol, cardColor;\n          switch (suit) {\n              case 'spade':\n                  suitSymbol = '‚ô†';\n                  cardColor = 'black';\n                  break;\n              case 'heart':\n                  suitSymbol = '‚ô•';\n                  cardColor = 'red';\n                  break;\n              case 'diamond':\n                  suitSymbol = '‚ô¶';\n                  cardColor = 'red';\n                  break;\n              case 'club':\n                  suitSymbol = '‚ô£';\n                  cardColor = 'black';\n                  break;\n              default:\n                  suitSymbol = 'üÉè';\n                  cardColor = 'black';\n                  break;\n          }\n\n          return {\n            suitSymbol: suitSymbol,\n              rank,\n              higher,\n              suit,\n              color: cardColor,\n              below: null\n          }\n        },\n        createDeck() {\n          const deck = [];\n          for (let i = 0; i < cardSuits.length; i++) {\n            for (let j = 0; j < cardRanking.length; j++) {  \n\n              const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n              const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n              deck.push(newCard);\n            }\n          }\n          console.log(deck,\"this is complete deck\")\n          return deck;\n\n        },\n        putCardsInDeck() {\n\n        },\n        distributeCards() {\n          const totalRow = 7; \n          this.remainingDeck = this.globalDeck;\n         \n          // each row will have index+1 card \n          // eg: 0th index  -  1 card and index(0th) card will be opne \n          // eg: 7th row: index - 6 and 7th (index actually) card will be open \n\n          for(let i=0; i< totalRow; i++) {\n            this.pileDeck[`row-${i}`] = []\n              for(let j=0; j<= i; j++) {\n                const card = this.remainingDeck[this.remainingDeck.length - 1]\n                card.isOpne = false\n                \n                if(j == i) {  \n                  card.isOpne = true\n                   \n                }\n                this.pileDeck[`row-${i}`].push(card)\n                // remove card from remaining card deck \n                this.remainingDeck.pop()\n              }\n          }\n          console.log(this.pileDeck,\"this is pile deck\")\n        },\n        shuffleCards(deck) {\n         return deck.sort(() => Math.random() - 0.5);\n       },\n      },\n      mounted() {\n        this.globalDeck = this.createDeck();\n        this.shuffledDeck = this.shuffleCards(this.globalDeck)\n        this.putCardsInDeck()\n        this.distributeCards()\n      }\n  }\n\n</script>\n\n<style scoped>\n.root {\n  position: relative;\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.top-area {\n  justify-content: space-around;\n  align-items: center;\n  min-height: 30%;\n  background: darkgreen;\n  display: flex;\n}\n\n.right-area {\n  width: 45%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.closed-card {\n  background: skyblue;\n}\n\n.bg-white {\n  background: white;\n}\n\n\n.card {\n  display: flex;\n  border-radius: 8px;\n  width: 100px;\n  height: 150px;\n  border: black solid 1px;\n  box-shadow: 0cm;\n}\n.red {\n  color: red\n}\n\n.black {\n  color: black\n}\n\n.card-details {\n  margin:auto;\n  align-content: center;\n  font-size: 60px;\n}\n.bottom-container {\n  padding-top: 60px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  justify-content: space-around;\n  background: lightgreen;\n}\n.pile-row {\n  display: flex;\n  flex-direction: column;\n}\n.pile-row .card:not(:first-child) {\n  margin-top: -100px;\n}\n.pile-column {\n  display: flex;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAAU;;EACZA,KAAK,EAAC;AAAW;gEAClBC,mBAAA,CAAoC;EAA/BD,KAAK,EAAC;AAAkB;;EACxBA,KAAK,EAAC;AAAc;;EAKxBA,KAAK,EAAC;AAAY;;EAEZA,KAAK,EAAC;AAAc;;EAM9BA,KAAK,EAAC;AAAkB;;uBAjB/BE,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJF,mBAAA,CAcM,OAdNG,UAcM,GAbFH,mBAAA,CAMM,OANNI,UAMM,GALFC,UAAoC,EACpCL,mBAAA,CAGM,OAHNM,UAGM,GAFJN,mBAAA,CAAgC,aAAAO,gBAAA,CAAvBC,IAAA,CAAAC,IAAI,CAACC,UAAU,kBACtBV,mBAAA,CAA0B,aAAAO,gBAAA,CAAlBC,IAAA,CAAAC,IAAI,CAACE,IAAI,iB,KAGzBX,mBAAA,CAIM,OAJNY,UAIM,I,kBAHJX,mBAAA,CAEMY,SAAA,QAbhBC,WAAA,CAW8BC,KAAA,CAAAC,SAAS,EAAjBP,IAAI;yBAAhBR,mBAAA,CAEM;MAF0BgB,GAAG,EAACR,IAAI,CAACC,UAAU;MAACX,KAAK,EAAC;QACtDC,mBAAA,CAAmD,OAAnDkB,UAAmD,EAAAX,gBAAA,CAAvBE,IAAI,CAACC,UAAU,iB;sCAMrDV,mBAAA,CASM,OATNmB,UASM,I,kBARJlB,mBAAA,CAOMY,SAAA,QA1BZC,WAAA,CAmByBC,KAAA,CAAAK,QAAQ,EAAfC,GAAG;yBAAfpB,mBAAA,CAOM;MAPwBgB,GAAG,EAAEI,GAAG;MAAEtB,KAAK,EAAC;2BACxCE,mBAAA,CAKIY,SAAA,QAzBhBC,WAAA,CAoBoCQ,QAAA,CAAAC,UAAU,CAACF,GAAG,GApBlD,CAoByBZ,IAAI,EAACe,CAAC;2BAAnBvB,mBAAA,CAKI;QALsCgB,GAAG,EAAEO,CAAC;QAAEzB,KAAK,EApBnE0B,eAAA,EAoBoE,MAAO,EAAShB,IAAI,CAACiB,MAAM;UACtEjB,IAAI,CAACiB,MAAM,I,cAAtBzB,mBAAA,CAGM;QAxBpBgB,GAAA;QAqBsClB,KAAK,EArB3C0B,eAAA,EAqB4C,cAAc,KAAYhB,IAAI,CAACkB,KAAK;UAChE3B,mBAAA,CAAgC,aAAAO,gBAAA,CAAvBE,IAAI,CAACC,UAAU,kBACxBV,mBAAA,CAA0B,aAAAO,gBAAA,CAAlBE,IAAI,CAACE,IAAI,iB,oBAvBjCiB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}