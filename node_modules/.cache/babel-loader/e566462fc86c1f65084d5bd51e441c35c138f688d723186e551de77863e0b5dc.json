{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"root\"\n};\nconst _hoisted_2 = {\n  class: \"top-area\"\n};\nconst _hoisted_3 = {\n  class: \"left-area\"\n};\nconst _hoisted_4 = {\n  class: \"deck-container\"\n};\nconst _hoisted_5 = {\n  class: \"right-area\"\n};\nconst _hoisted_6 = [\"id\"];\nconst _hoisted_7 = {\n  class: \"bottom-container\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"card\"\n};\nconst _hoisted_9 = [\"id\", \"onDragstart\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", {\n    class: \"card closed-card\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.onDeckClick && $options.onDeckClick(...args))\n  }), $data.currentOpenCardInDec ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"card bg-white\",\n    draggable: \"true\",\n    onDragstart: _cache[1] || (_cache[1] = $event => $options.handleDragCurrentOpenDeckCard())\n  }, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"card-details\", `${$data.currentOpenCardInDec.color}`])\n  }, [_createElementVNode(\"div\", null, _toDisplayString($data.currentOpenCardInDec.suitSymbol), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString($data.currentOpenCardInDec.rank), 1 /* TEXT */)], 2 /* CLASS */)], 32 /* NEED_HYDRATION */)) : _createCommentVNode(\"v-if\", true)])]), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.pileCards, card => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: card.suitSymbol,\n      class: \"card bg-white\",\n      onDragover: _cache[2] || (_cache[2] = _withModifiers(() => {}, [\"prevent\"])),\n      id: `${card.suit}`,\n      onDrop: _cache[3] || (_cache[3] = $event => $options.handleDropForPile($event, _ctx.target))\n    }, [card.rank ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      class: _normalizeClass([\"card-details\", `${card.cardColor}`])\n    }, [_createElementVNode(\"div\", null, _toDisplayString(card.suitSymbol), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString(card.rank), 1 /* TEXT */)], 2 /* CLASS */)) : (_openBlock(), _createElementBlock(\"div\", {\n      key: 1,\n      class: _normalizeClass([\"card-details\", `${card.cardColor}`])\n    }, _toDisplayString(card.suitSymbol), 3 /* TEXT, CLASS */))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.totalRow, row => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: row,\n      class: \"pile-row\"\n    }, [$options.getPileDec(row).length == 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8)) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.getPileDec(row), (card, i) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: i,\n        class: _normalizeClass([\"card\", card.isOpen ? 'bg-white non-show-card' : 'closed-card non-show-card']),\n        id: `row-${row}`,\n        onDrop: _cache[4] || (_cache[4] = $event => $options.handleDropForRow($event, _ctx.target)),\n        onDragover: _cache[5] || (_cache[5] = _withModifiers(() => {}, [\"prevent\"])),\n        onDragstart: $event => $options.handleDragStart(card, row),\n        draggable: \"true\"\n      }, [card.isOpen ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 0,\n        class: _normalizeClass([\"card-details\", `${card.color}`])\n      }, [_createElementVNode(\"div\", null, _toDisplayString(card.suitSymbol), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString(card.rank), 1 /* TEXT */)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true)], 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_9);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","onClick","_cache","args","$options","onDeckClick","$data","currentOpenCardInDec","draggable","onDragstart","$event","handleDragCurrentOpenDeckCard","_normalizeClass","color","_toDisplayString","suitSymbol","rank","_createCommentVNode","_hoisted_5","_Fragment","_renderList","pileCards","card","onDragover","_withModifiers","id","suit","onDrop","handleDropForPile","_ctx","target","cardColor","_hoisted_6","_hoisted_7","totalRow","row","getPileDec","length","_hoisted_8","i","isOpen","handleDropForRow","handleDragStart","_hoisted_9"],"sources":["/Users/ruchita/ruchita-projects/simple-card-game/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"root\">\n    <div class=\"top-area\">\n        <div class=\"left-area\">\n          <div class=\"deck-container\">\n            <div class=\"card closed-card\" @click=\"onDeckClick\"></div>\n            <div v-if=\"currentOpenCardInDec\" class=\"card bg-white\" draggable=\"true\" @dragstart=\"handleDragCurrentOpenDeckCard()\">\n              <div class=\" card-details\" :class=\"`${currentOpenCardInDec.color}`\">\n                <div> {{ currentOpenCardInDec.suitSymbol}}</div>\n                <div> {{currentOpenCardInDec.rank}} </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"right-area\">\n          <div v-for=\"card in pileCards\" :key=card.suitSymbol class=\"card bg-white\" @dragover.prevent :id=\"`${card.suit}`\"\n           @drop=\"handleDropForPile($event, target)\">\n              <div v-if=\"card.rank\" class=\"card-details\" :class=\"`${card.cardColor}`\">\n                <div> {{ card.suitSymbol}}</div>\n                <div> {{card.rank}} </div>\n              </div>\n              <div v-else class=\"card-details\" :class=\"`${card.cardColor}`\" >{{card.suitSymbol}}</div>\n          </div>\n        </div>\n\n    </div>\n\n    <div class=\"bottom-container\">\n      <div v-for=\"row in totalRow\" :key='row' class=\"pile-row\">\n        <div v-if=\"getPileDec(row).length == 0\" class=\"card\">\n\n        </div>\n            <div v-for=\"(card,i) in getPileDec(row)\" :key='i' class=\"card \"\n              :id=\"`row-${row}`\"\n             :class=\"card.isOpen ? 'bg-white non-show-card': 'closed-card non-show-card'\" \n             @drop=\"handleDropForRow($event, target)\" @dragover.prevent\n             @dragstart=\"handleDragStart(card, row)\" draggable=\"true\">\n             <div v-if=\"card.isOpen\" class=\"card-details\" :class=\"`${card.color}`\">\n                <div> {{ card.suitSymbol}}</div>\n                <div> {{card.rank}} </div>\n              </div>\n          </div>\n      </div>\n    </div>\n\n  </div>  \n</template>\n\n<script>\n  const cardRanking = ['A', '2', '3', '4', '5',\n              '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  const cardSuits = ['spade', 'heart', 'diamond', 'club'];\n\n  // 24 cards in deck\n  // 28 card distributed\n\n  export default {\n      data() {\n        return {\n          currentOpenCardInDec: null,\n          remaininDecNextIndex: 0,\n          totalRow: [0,1,2,3,4,5,6],\n          globalDeck: [],\n          shuffledDeck: [],\n          pileCards: [\n            {\n              suitSymbol:'♠',\n              suit: 'spade',\n              cardColor :'black',\n              rank: null,\n              higher: 'A'\n            },\n            {\n              suitSymbol:'♥',\n              suit: 'heart',\n              cardColor :'red',\n              rank: null,\n              higher: 'A'\n            },\n            {\n              suitSymbol:'♦',\n              suit: 'diamond',\n              cardColor :'red',\n              rank: null,\n              higher: 'A'\n            },\n            {\n              suitSymbol:'♣',\n              suit: 'club',\n              cardColor :'black',\n              rank: null,\n              higher: 'A'\n            },\n          ],\n          remainingDeck: [],\n          pileDeck: {},\n          draggindCard: null,\n          draggingRow: null\n        }\n      },\n      methods: {\n        handleDropForRow(event, target) {\n          console.log(event, target)\n          const row = event.target.id\n        },\n        handleDragCurrentOpenDeckCard() {\n          this.draggindCard = this.currentOpenCardInDec\n          this.draggingRow = null\n        },\n        handleDragStart(card, row) {\n          this.draggindCard = card\n          this.draggingRow = row\n          console.log(card,\"this is dragging card\")\n        },\n        handleDropForPile(e, target) {\n          console.log(target)\n          this.checkCardCanBeDropedOnPile(e.target.id)\n          console.log(\"this is drop\", e.target.id)\n        },\n        checkCardCanBeDropedOnPile(id) {\n          const droppedCard = this.pileCards.find(card => card.suit == id)\n          const index = this.pileCards.findIndex(card => card.suit == id)\n          if(!droppedCard) {\n            console.warn(\"no card found to drop\")\n            return\n          }\n          const higherOfSelectedPile = droppedCard.higher\n          if(higherOfSelectedPile == this.draggindCard.rank) {\n            // card can be dropped there\n            console.log(this.pileCards[index],\"this.pileCards[index]\")\n            this.pileCards[index].rank =  this.draggindCard.rank\n            this.pileCards[index].higher = this.draggindCard.higher\n            this.updateDraggedRow()\n            this.updateRemainingDeck();\n          }\n        },\n        updateRemainingDeck() {\n          if(!this.currentOpenCardInDec) {\n            return;\n          }\n          if(this.draggindCard.rank != this.currentOpenCardInDec.rank && this.draggindCard.suit != this.currentOpenCardInDec.suit) {\n            console.warn(\"draggind card is not from deck so not updating anything\")\n            return\n          }\n          const draggedCardIndex = this.remainingDeck.findIndex(e => e.rank == this.draggindCard.rank && e.suit == this.draggindCard.suit)\n          console.log(this.remainingDeck[draggedCardIndex])\n          this.remainingDeck.splice(draggedCardIndex, 1)\n\n          this.onDeckClick()\n        },  \n        updateDraggedRow() {\n          if(this.draggingRow == null) {\n            console.warn(\"no row index found to update\")\n            return;\n          }\n          this.pileDeck[`row-${this.draggingRow}`].pop()\n          const index = this.pileDeck[`row-${this.draggingRow}`].length\n          if(index == 0) {\n            return;\n          }\n          this.pileDeck[`row-${this.draggingRow}`][index - 1].isOpen = true\n        },\n        onDeckClick() {\n          this.currentOpenCardInDec = this.remainingDeck[this.remaininDecNextIndex]\n          this.remaininDecNextIndex++;\n\n          if(this.remaininDecNextIndex == (this.remainingDeck.length) ) {\n            this.showDeckResetIcon = true;\n            this.remaininDecNextIndex = 0\n            return\n          }\n\n        },\n        getPileDec(index) {\n          return this.pileDeck[`row-${index}`] || []\n        },\n        createCard(rank, suit, higher) {\n          \n          let suitSymbol, cardColor;\n          switch (suit) {\n              case 'spade':\n                  suitSymbol = '♠';\n                  cardColor = 'black';\n                  break;\n              case 'heart':\n                  suitSymbol = '♥';\n                  cardColor = 'red';\n                  break;\n              case 'diamond':\n                  suitSymbol = '♦';\n                  cardColor = 'red';\n                  break;\n              case 'club':\n                  suitSymbol = '♣';\n                  cardColor = 'black';\n                  break;\n              default:\n                  suitSymbol = '🃏';\n                  cardColor = 'black';\n                  break;\n          }\n\n          return {\n            suitSymbol: suitSymbol,\n              rank,\n              higher,\n              suit,\n              color: cardColor,\n              below: null\n          }\n        },\n        createDeck() {\n          const deck = [];\n          for (let i = 0; i < cardSuits.length; i++) {\n            for (let j = 0; j < cardRanking.length; j++) {  \n              const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n              const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n              deck.push(newCard);\n            }\n          }\n          return deck;\n        },\n        handleDropEvent(element) {\n          console.log(element,\"this is drop element taget\")\n        },\n\n        distributeCards() {\n          const totalRow = 7; \n          this.remainingDeck = this.globalDeck;\n         \n          // each row will have index+1 card \n          // eg: 0th index  -  1 card and index(0th) card will be opne \n          // eg: 7th row: index - 6 and 7th (index actually) card will be open \n\n          for(let i=0; i< totalRow; i++) {\n            this.pileDeck[`row-${i}`] = []\n              for(let j=0; j<= i; j++) {\n                const card = this.remainingDeck[this.remainingDeck.length - 1]\n                card.isOpen = false\n                \n                if(j == i) {  \n                  card.isOpen = true\n                   \n                }\n                this.pileDeck[`row-${i}`].push(card)\n                // remove card from remaining card deck \n                this.remainingDeck.pop()\n              }\n          }\n          console.log(this.pileDeck,\"this is pile deck\")\n        },\n        shuffleCards(deck) {\n         return deck.sort(() => Math.random() - 0.5);\n       },\n      },\n      checkCardCanBeDropeed() {\n\n      },\n      mounted() {\n        this.globalDeck = this.createDeck();\n        this.shuffledDeck = this.shuffleCards(this.globalDeck)\n        this.distributeCards()\n      },\n      created() {\n      }\n  }\n\n</script>\n\n<style scoped>\n.root {\n  position: relative;\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.top-area {\n  justify-content: space-around;\n  align-items: center;\n  min-height: 30%;\n  background: darkgreen;\n  display: flex;\n}\n\n.right-area {\n  width: 45%;\n  display: flex;\n  justify-content: space-around;\n}\n\n.closed-card {\n  background: skyblue;\n}\n\n.bg-white {\n  background: white;\n}\n\n\n.card {\n  display: flex;\n  border-radius: 8px;\n  width: 100px;\n  height: 150px;\n  border: black solid 1px;\n  box-shadow: 0cm;\n}\n.red {\n  color: red\n}\n\n.black {\n  color: black\n}\n\n.card-details {\n  margin:auto;\n  align-content: center;\n  font-size: 60px;\n}\n.bottom-container {\n  padding-top: 60px;\n  display: flex;\n  height: 100%;\n  width: 100%;\n  justify-content: space-around;\n  background: lightgreen;\n}\n.pile-row {\n  display: flex;\n  flex-direction: column;\n}\n.pile-row .card:not(:first-child) {\n  margin-top: -100px;\n}\n.deck-container {\n  display: flex;\n}\n.pile-column {\n  display: flex;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}