{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst cardRanking = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\nconst cardSuits = ['spade', 'heart', 'diamond', 'club'];\nexport default {\n  data() {\n    return {\n      globalDeck: [],\n      shuffledDeck: []\n    };\n  },\n  methods: {\n    createCard(rank, suit, higher) {\n      let suitSymbol, cardColor;\n      switch (suit) {\n        case 'spade':\n          suitSymbol = '‚ô†';\n          cardColor = 'black';\n          break;\n        case 'heart':\n          suitSymbol = '‚ô•';\n          cardColor = 'red';\n          break;\n        case 'diamond':\n          suitSymbol = '‚ô¶';\n          cardColor = 'red';\n          break;\n        case 'club':\n          suitSymbol = '‚ô£';\n          cardColor = 'black';\n          break;\n        default:\n          suitSymbol = 'üÉè';\n          cardColor = 'black';\n          break;\n      }\n      let frontInnerHTML = `<div class=\"inner-info card-rank\">${rank}</div>`;\n      frontInnerHTML += `<div class=\"inner-info card-suit-small\">${suitSymbol}</div>`;\n      frontInnerHTML += `<div class=\"inner-info card-suit-big\">${suitSymbol}</div>`;\n      return {\n        rank,\n        higher,\n        inner: frontInnerHTML,\n        suit,\n        color: cardColor,\n        below: null\n      };\n    },\n    createDeck() {\n      const deck = [];\n      for (let i = 0; i < cardSuits.length; i++) {\n        for (let j = 0; j < cardRanking.length; j++) {\n          const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n          const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n          deck.push(newCard);\n        }\n      }\n      console.log(deck, \"this is complete deck\");\n      return deck;\n    }\n  },\n  mounted() {\n    this.globalDeck = this.createDeck();\n  }\n};","map":{"version":3,"names":["cardRanking","cardSuits","data","globalDeck","shuffledDeck","methods","createCard","rank","suit","higher","suitSymbol","cardColor","frontInnerHTML","inner","color","below","createDeck","deck","i","length","j","higherRank","newCard","push","console","log","mounted"],"sources":["/Users/ruchita/ruchita-projects/simple-card-game/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n\n\n  </div>  \n</template>\n\n<script>\n  const cardRanking = ['A', '2', '3', '4', '5',\n              '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  const cardSuits = ['spade', 'heart', 'diamond', 'club'];\n  export default {\n      data() {\n        return {\n\n          globalDeck: [],\n          shuffledDeck: [],\n\n        }\n      },\n      methods: {\n        createCard(rank, suit, higher) {\n   \n   let suitSymbol, cardColor;\n   switch (suit) {\n       case 'spade':\n           suitSymbol = '‚ô†';\n           cardColor = 'black';\n           break;\n       case 'heart':\n           suitSymbol = '‚ô•';\n           cardColor = 'red';\n           break;\n       case 'diamond':\n           suitSymbol = '‚ô¶';\n           cardColor = 'red';\n           break;\n       case 'club':\n           suitSymbol = '‚ô£';\n           cardColor = 'black';\n           break;\n       default:\n           suitSymbol = 'üÉè';\n           cardColor = 'black';\n           break;\n   }\n\n   let frontInnerHTML = `<div class=\"inner-info card-rank\">${rank}</div>`;\n   frontInnerHTML += `<div class=\"inner-info card-suit-small\">${suitSymbol}</div>`;\n   frontInnerHTML += `<div class=\"inner-info card-suit-big\">${suitSymbol}</div>`;\n\n   return {\n       rank,\n       higher,\n       inner: frontInnerHTML,\n       suit,\n       color: cardColor,\n       below: null\n   }\n },\n        createDeck() {\n          const deck = [];\n          for (let i = 0; i < cardSuits.length; i++) {\n            for (let j = 0; j < cardRanking.length; j++) {  \n\n              const higherRank = cardRanking[j + 1] ? cardRanking[j + 1] : null;\n              const newCard = this.createCard(cardRanking[j], cardSuits[i], higherRank);\n              deck.push(newCard);\n            }\n          }\n          console.log(deck,\"this is complete deck\")\n          return deck;\n\n        },\n      },\n      mounted() {\n        this.globalDeck = this.createDeck();\n      }\n  }\n\n</script>\n\n<style scoped>\n\n</style>\n"],"mappings":";AAQE,MAAMA,WAAU,GAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAChC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AACpD,MAAMC,SAAQ,GAAI,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC;AACvD,eAAe;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MAELC,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE;IAEhB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAACC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAE;MAEpC,IAAIC,UAAU,EAAEC,SAAS;MACzB,QAAQH,IAAI;QACR,KAAK,OAAO;UACRE,UAAS,GAAI,GAAG;UAChBC,SAAQ,GAAI,OAAO;UACnB;QACJ,KAAK,OAAO;UACRD,UAAS,GAAI,GAAG;UAChBC,SAAQ,GAAI,KAAK;UACjB;QACJ,KAAK,SAAS;UACVD,UAAS,GAAI,GAAG;UAChBC,SAAQ,GAAI,KAAK;UACjB;QACJ,KAAK,MAAM;UACPD,UAAS,GAAI,GAAG;UAChBC,SAAQ,GAAI,OAAO;UACnB;QACJ;UACID,UAAS,GAAI,IAAI;UACjBC,SAAQ,GAAI,OAAO;UACnB;MACR;MAEA,IAAIC,cAAa,GAAK,qCAAoCL,IAAK,QAAO;MACtEK,cAAa,IAAM,2CAA0CF,UAAW,QAAO;MAC/EE,cAAa,IAAM,yCAAwCF,UAAW,QAAO;MAE7E,OAAO;QACHH,IAAI;QACJE,MAAM;QACNI,KAAK,EAAED,cAAc;QACrBJ,IAAI;QACJM,KAAK,EAAEH,SAAS;QAChBI,KAAK,EAAE;MACX;IACF,CAAC;IACMC,UAAUA,CAAA,EAAG;MACX,MAAMC,IAAG,GAAI,EAAE;MACf,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIjB,SAAS,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,KAAK,IAAIE,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIpB,WAAW,CAACmB,MAAM,EAAEC,CAAC,EAAE,EAAE;UAE3C,MAAMC,UAAS,GAAIrB,WAAW,CAACoB,CAAA,GAAI,CAAC,IAAIpB,WAAW,CAACoB,CAAA,GAAI,CAAC,IAAI,IAAI;UACjE,MAAME,OAAM,GAAI,IAAI,CAAChB,UAAU,CAACN,WAAW,CAACoB,CAAC,CAAC,EAAEnB,SAAS,CAACiB,CAAC,CAAC,EAAEG,UAAU,CAAC;UACzEJ,IAAI,CAACM,IAAI,CAACD,OAAO,CAAC;QACpB;MACF;MACAE,OAAO,CAACC,GAAG,CAACR,IAAI,EAAC,uBAAuB;MACxC,OAAOA,IAAI;IAEb;EACF,CAAC;EACDS,OAAOA,CAAA,EAAG;IACR,IAAI,CAACvB,UAAS,GAAI,IAAI,CAACa,UAAU,CAAC,CAAC;EACrC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}